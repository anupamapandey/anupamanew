{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9466548,"sourceType":"datasetVersion","datasetId":5756078}],"dockerImageVersionId":30775,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-09-25T11:58:19.591739Z","iopub.execute_input":"2024-09-25T11:58:19.592445Z","iopub.status.idle":"2024-09-25T11:58:19.623007Z","shell.execute_reply.started":"2024-09-25T11:58:19.592390Z","shell.execute_reply":"2024-09-25T11:58:19.621644Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**LoanTap** is an online platform committed to delivering customized loan products to millennials. They innovate in an otherwise dull loan segment, to deliver instant, flexible loans on consumer friendly terms to salaried professionals and businessmen.\n\nThe data science team at LoanTap is building an underwriting layer to determine the creditworthiness of MSMEs as well as individuals.\n\n**Problem Statement**: Given a set of attributes for an Individual, determine if a credit line should be extended to them. The main challenge is to minimise the risk of NPAs by flagging defaulters while maximising opportunity to earn interest by disbursing loans to as many customers as possible.\n\n**Data dictionary**:\n\n**loan_amnt** : The listed amount of the loan applied for by the borrower. If at some point in time, the credit department reduces the loan amount, then it will be reflected in this value.\n\n**term** : The number of payments on the loan. Values are in months and can be either 36 or 60.\n\n**int_rate** : Interest Rate on the loan\n\n**installment** : The monthly payment owed by the borrower if the loan originates.\n\n**grade** : LoanTap assigned loan grade\n\n**sub_grade** : LoanTap assigned loan subgrade\n\n**emp_title** :The job title supplied by the Borrower when applying for the loan.\n\n**emp_length** : Employment length in years. Possible values are between 0 and 10 where 0 means less than one year and 10 means ten or more years.\n\n**home_ownership** : The home ownership status provided by the borrower during registration or obtained from the credit report.\n\n**annual_inc** : The self-reported annual income provided by the borrower during registration.\n\n**verification_status** : Indicates if income was verified by LoanTap, not verified, or if the income source was verified\n\n**issue_d** : The month which the loan was funded\n\n**loan_status** : Current status of the loan - Target Variable\n\n**purpose** : A category provided by the borrower for the loan request.\n\n**title** : The loan title provided by the borrower\n\n**dti** : A ratio calculated using the borrower’s total monthly debt payments on the total debt \nobligations, excluding mortgage and the requested LoanTap loan, divided by the borrower’s self-reported monthly income.\n\n**earliest_cr_line** :The month the borrower's earliest reported credit line was opened\n\n**open_acc** : The number of open credit lines in the borrower's credit file.\n\n**pub_rec** : Number of derogatory public records\n\n**revol_bal** : Total credit revolving balance\n\n**revol_util** : Revolving line utilization rate, or the amount of credit the borrower is using relative to all available revolving credit.\n\n**total_acc** : The total number of credit lines currently in the borrower's credit file\n\n**initial_list_status** : The initial listing status of the loan. Possible values are – W, F\n\n**application_type** : Indicates whether the loan is an individual application or a joint application with two co-borrowers\n\n**mort_acc** : Number of mortgage accounts.\n\n**pub_rec_bankruptcies** : Number of public record bankruptcies\n\n**Address**: Address of the individual","metadata":{}},{"cell_type":"code","source":"#Data Processing \nimport pandas as pd\nimport numpy as np\n\n#Data visualization \nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\n%matplotlib inline \n\n#Seting options for full column view data\npd.set_option('display.max_columns',None)\n\n#stats and model building\nfrom scipy import stats\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import (accuracy_score, confusion_matrix,\n                              roc_curve,auc,ConfusionMatrixDisplay,\n                              f1_score,recall_score,precision_score,\n                              precision_recall_curve,average_precision_score,\n                            classification_report)\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\nfrom imblearn.over_sampling import SMOTE\n\n#Hide warning\nimport warnings\nwarnings.filterwarnings(\"ignore\")","metadata":{"execution":{"iopub.status.busy":"2024-09-25T11:58:19.625448Z","iopub.execute_input":"2024-09-25T11:58:19.625967Z","iopub.status.idle":"2024-09-25T11:58:19.640227Z","shell.execute_reply.started":"2024-09-25T11:58:19.625914Z","shell.execute_reply":"2024-09-25T11:58:19.638800Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"path =\"/kaggle/input/logistic-regression/logistic_regression.csv\"\n\ndf=pd.read_csv(path)\ndf.head()\n","metadata":{"execution":{"iopub.status.busy":"2024-09-25T11:58:19.642786Z","iopub.execute_input":"2024-09-25T11:58:19.643190Z","iopub.status.idle":"2024-09-25T11:58:23.081745Z","shell.execute_reply.started":"2024-09-25T11:58:19.643149Z","shell.execute_reply":"2024-09-25T11:58:23.080625Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# shape of data\n\ndf.shape","metadata":{"execution":{"iopub.status.busy":"2024-09-25T11:58:23.084047Z","iopub.execute_input":"2024-09-25T11:58:23.084626Z","iopub.status.idle":"2024-09-25T11:58:23.091839Z","shell.execute_reply.started":"2024-09-25T11:58:23.084571Z","shell.execute_reply":"2024-09-25T11:58:23.090741Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#statistical summary\ndf.describe()","metadata":{"execution":{"iopub.status.busy":"2024-09-25T11:58:23.093811Z","iopub.execute_input":"2024-09-25T11:58:23.094241Z","iopub.status.idle":"2024-09-25T11:58:23.336441Z","shell.execute_reply.started":"2024-09-25T11:58:23.094192Z","shell.execute_reply":"2024-09-25T11:58:23.335404Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# **Data Cleaning**","metadata":{}},{"cell_type":"code","source":"df.info()","metadata":{"execution":{"iopub.status.busy":"2024-09-25T11:58:23.338888Z","iopub.execute_input":"2024-09-25T11:58:23.339257Z","iopub.status.idle":"2024-09-25T11:58:23.983924Z","shell.execute_reply.started":"2024-09-25T11:58:23.339219Z","shell.execute_reply":"2024-09-25T11:58:23.982879Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Checking Column Datatypes**","metadata":{}},{"cell_type":"code","source":"#non-Numeric columns\ncat_cols=df.select_dtypes(include='object').columns\ncat_cols","metadata":{"execution":{"iopub.status.busy":"2024-09-25T11:58:23.985464Z","iopub.execute_input":"2024-09-25T11:58:23.985959Z","iopub.status.idle":"2024-09-25T11:58:24.057746Z","shell.execute_reply.started":"2024-09-25T11:58:23.985905Z","shell.execute_reply":"2024-09-25T11:58:24.056627Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#number of unique values in all non-numeric columns\nfor col in cat_cols:\n    print(f\"no.of unique values in {col}:{df[col].nunique()}\")","metadata":{"execution":{"iopub.status.busy":"2024-09-25T11:58:24.059034Z","iopub.execute_input":"2024-09-25T11:58:24.059416Z","iopub.status.idle":"2024-09-25T11:58:24.832631Z","shell.execute_reply.started":"2024-09-25T11:58:24.059376Z","shell.execute_reply":"2024-09-25T11:58:24.831595Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#convert earliest credit line and issue date to datatime \ndf['earliest_cr_line']=pd.to_datetime(df['earliest_cr_line'])\ndf['issue_d']=pd.to_datetime(df['issue_d'])","metadata":{"execution":{"iopub.status.busy":"2024-09-25T11:58:24.834124Z","iopub.execute_input":"2024-09-25T11:58:24.834646Z","iopub.status.idle":"2024-09-25T11:58:25.030443Z","shell.execute_reply.started":"2024-09-25T11:58:24.834592Z","shell.execute_reply":"2024-09-25T11:58:25.029289Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#convet employment length to numeric\nd = { '10+ years':10 , '4 years':4 , '< 1 year':0,\n       '6 years':6 , '9 years':9 , '2 years':2 , '3 years':3,\n        '8 years':8, '7 years':7 , '5 years':5, '1 year':1 }\ndf['emp_length']=df['emp_length'].replace(d)","metadata":{"execution":{"iopub.status.busy":"2024-09-25T11:58:25.031889Z","iopub.execute_input":"2024-09-25T11:58:25.032257Z","iopub.status.idle":"2024-09-25T11:58:25.558452Z","shell.execute_reply.started":"2024-09-25T11:58:25.032217Z","shell.execute_reply":"2024-09-25T11:58:25.557342Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# convert columns with less number of unique values to categorical columns\ncat_cols = ['term','grade','sub_grade','home_ownership',\n            'verification_status','loan_status','purpose',\n            'initial_list_status','application_type']\n\ndf[cat_cols] = df[cat_cols].astype('category')","metadata":{"execution":{"iopub.status.busy":"2024-09-25T11:58:25.559672Z","iopub.execute_input":"2024-09-25T11:58:25.559996Z","iopub.status.idle":"2024-09-25T11:58:25.939952Z","shell.execute_reply.started":"2024-09-25T11:58:25.559960Z","shell.execute_reply":"2024-09-25T11:58:25.938795Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.info()","metadata":{"execution":{"iopub.status.busy":"2024-09-25T11:58:25.945464Z","iopub.execute_input":"2024-09-25T11:58:25.945909Z","iopub.status.idle":"2024-09-25T11:58:26.107296Z","shell.execute_reply.started":"2024-09-25T11:58:25.945867Z","shell.execute_reply":"2024-09-25T11:58:26.106246Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Check for Duplicate Values**","metadata":{}},{"cell_type":"code","source":"df.duplicated().sum()","metadata":{"execution":{"iopub.status.busy":"2024-09-25T11:58:26.108466Z","iopub.execute_input":"2024-09-25T11:58:26.108829Z","iopub.status.idle":"2024-09-25T11:58:26.732753Z","shell.execute_reply.started":"2024-09-25T11:58:26.108791Z","shell.execute_reply":"2024-09-25T11:58:26.731569Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"There are no duplicate instances in the data","metadata":{}},{"cell_type":"markdown","source":"**Handling Missing Values**","metadata":{}},{"cell_type":"code","source":"df.isna().sum()","metadata":{"execution":{"iopub.status.busy":"2024-09-25T11:58:26.734283Z","iopub.execute_input":"2024-09-25T11:58:26.735077Z","iopub.status.idle":"2024-09-25T11:58:26.886824Z","shell.execute_reply.started":"2024-09-25T11:58:26.735022Z","shell.execute_reply":"2024-09-25T11:58:26.885739Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#filling missing values with 'unknown' for boject dtype\n\nfill_values={'title': 'unknown','emp_title':'unknown'}\ndf.fillna(value=fill_values, inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-09-25T11:58:26.888380Z","iopub.execute_input":"2024-09-25T11:58:26.888757Z","iopub.status.idle":"2024-09-25T11:58:27.027946Z","shell.execute_reply.started":"2024-09-25T11:58:26.888719Z","shell.execute_reply":"2024-09-25T11:58:27.026945Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# mean aggregation of mort_acc by total_acc to fil missing values\navg_mort= df.groupby('total_acc')['mort_acc'].mean()\n\ndef fill_mort(total_acc,mort_acc):\n    if np.isnan(mort_acc):\n        return avg_mort[total_acc].round()\n    else:\n        return mort_acc\n    ","metadata":{"execution":{"iopub.status.busy":"2024-09-25T11:58:27.029283Z","iopub.execute_input":"2024-09-25T11:58:27.029669Z","iopub.status.idle":"2024-09-25T11:58:27.048407Z","shell.execute_reply.started":"2024-09-25T11:58:27.029627Z","shell.execute_reply":"2024-09-25T11:58:27.047467Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df['mort_acc'] = df.apply(lambda x: fill_mort(x['total_acc'],x['mort_acc']), axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-09-25T11:58:27.049770Z","iopub.execute_input":"2024-09-25T11:58:27.050111Z","iopub.status.idle":"2024-09-25T11:58:38.329215Z","shell.execute_reply.started":"2024-09-25T11:58:27.050073Z","shell.execute_reply":"2024-09-25T11:58:38.328228Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.dropna(inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-09-25T11:58:38.330511Z","iopub.execute_input":"2024-09-25T11:58:38.330835Z","iopub.status.idle":"2024-09-25T11:58:38.527325Z","shell.execute_reply.started":"2024-09-25T11:58:38.330800Z","shell.execute_reply":"2024-09-25T11:58:38.526235Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.isna().sum()","metadata":{"execution":{"iopub.status.busy":"2024-09-25T11:58:38.528900Z","iopub.execute_input":"2024-09-25T11:58:38.529357Z","iopub.status.idle":"2024-09-25T11:58:38.675094Z","shell.execute_reply.started":"2024-09-25T11:58:38.529305Z","shell.execute_reply":"2024-09-25T11:58:38.674004Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.shape","metadata":{"execution":{"iopub.status.busy":"2024-09-25T11:58:38.676443Z","iopub.execute_input":"2024-09-25T11:58:38.676806Z","iopub.status.idle":"2024-09-25T11:58:38.683865Z","shell.execute_reply.started":"2024-09-25T11:58:38.676769Z","shell.execute_reply":"2024-09-25T11:58:38.682746Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Outlier Treatment**","metadata":{}},{"cell_type":"code","source":"num_cols=df.select_dtypes(include='number').columns\nnum_cols","metadata":{"execution":{"iopub.status.busy":"2024-09-25T11:58:38.685359Z","iopub.execute_input":"2024-09-25T11:58:38.685829Z","iopub.status.idle":"2024-09-25T11:58:38.734195Z","shell.execute_reply.started":"2024-09-25T11:58:38.685777Z","shell.execute_reply":"2024-09-25T11:58:38.732884Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"fig = plt.figure(figsize=(10,21))\ni =1 \nfor col in num_cols:\n    ax=plt.subplot(7,2,i)\n    sns.boxplot(x=df[col])\n    plt.title(f'Boxplot of {col}')\n    i +=1\n    \nplt.tight_layout()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-25T11:58:38.735927Z","iopub.execute_input":"2024-09-25T11:58:38.736689Z","iopub.status.idle":"2024-09-25T11:58:41.262150Z","shell.execute_reply.started":"2024-09-25T11:58:38.736633Z","shell.execute_reply":"2024-09-25T11:58:41.260856Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Here we can see that many columns have outliers. Lets remove the rows with outliers using standard deviation (99% data is within 3 standard deviations in case of normally distributed data).\n\nFor pub_Rec and pub_rec_bankruptcies, we can apply the 0 or 1 approach","metadata":{}},{"cell_type":"code","source":"# convert pub_rec and pub_rec_bankruptices to categorical columns\n\ndf['pub_rec_bankruptcies'] = np.where(df['pub_rec_bankruptcies']> 0, 'yes', 'no')\ndf['pub_rec']=np.where(df['pub_rec']>0,'yes','no')\ndf[['pub_rec_bankruptcies','pub_rec']]= df[['pub_rec_bankruptcies','pub_rec']].astype('category')","metadata":{"execution":{"iopub.status.busy":"2024-09-25T11:58:41.264190Z","iopub.execute_input":"2024-09-25T11:58:41.264617Z","iopub.status.idle":"2024-09-25T11:58:41.494525Z","shell.execute_reply.started":"2024-09-25T11:58:41.264575Z","shell.execute_reply":"2024-09-25T11:58:41.493566Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# numeric columns after converting public records to category\n\nnum_cols = df.select_dtypes(include='number').columns\nnum_cols","metadata":{"execution":{"iopub.status.busy":"2024-09-25T11:58:41.496166Z","iopub.execute_input":"2024-09-25T11:58:41.496664Z","iopub.status.idle":"2024-09-25T11:58:41.526155Z","shell.execute_reply.started":"2024-09-25T11:58:41.496612Z","shell.execute_reply":"2024-09-25T11:58:41.524947Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Removing outliers using standard deviations\nfor col in num_cols:\n  mean=df[col].mean()\n  std=df[col].std()\n  upper = mean + (3*std)\n  df = df[~(df[col]>upper)]","metadata":{"execution":{"iopub.status.busy":"2024-09-25T11:58:41.527666Z","iopub.execute_input":"2024-09-25T11:58:41.528136Z","iopub.status.idle":"2024-09-25T11:58:42.135181Z","shell.execute_reply.started":"2024-09-25T11:58:41.528095Z","shell.execute_reply":"2024-09-25T11:58:42.134129Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.shape","metadata":{"execution":{"iopub.status.busy":"2024-09-25T11:58:42.136582Z","iopub.execute_input":"2024-09-25T11:58:42.137015Z","iopub.status.idle":"2024-09-25T11:58:42.148665Z","shell.execute_reply.started":"2024-09-25T11:58:42.136963Z","shell.execute_reply":"2024-09-25T11:58:42.143563Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Feature Engineering**","metadata":{}},{"cell_type":"code","source":"df['address'].sample(10)","metadata":{"execution":{"iopub.status.busy":"2024-09-25T11:58:42.150250Z","iopub.execute_input":"2024-09-25T11:58:42.150752Z","iopub.status.idle":"2024-09-25T11:58:42.174920Z","shell.execute_reply.started":"2024-09-25T11:58:42.150696Z","shell.execute_reply":"2024-09-25T11:58:42.173552Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#deriving zip code and state from address\ndf[['state','zip_code']]=df['address'].apply(lambda x: pd.Series([x[-8:-6],x[-5:]]))","metadata":{"execution":{"iopub.status.busy":"2024-09-25T11:58:42.176976Z","iopub.execute_input":"2024-09-25T11:58:42.177492Z","iopub.status.idle":"2024-09-25T11:59:37.915519Z","shell.execute_reply.started":"2024-09-25T11:58:42.177421Z","shell.execute_reply":"2024-09-25T11:59:37.914323Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#drop address\ndf.drop([\"address\"],axis=1,inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-09-25T11:59:37.917205Z","iopub.execute_input":"2024-09-25T11:59:37.917618Z","iopub.status.idle":"2024-09-25T11:59:37.993122Z","shell.execute_reply.started":"2024-09-25T11:59:37.917576Z","shell.execute_reply":"2024-09-25T11:59:37.991828Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.zip_code.nunique()","metadata":{"execution":{"iopub.status.busy":"2024-09-25T11:59:38.000124Z","iopub.execute_input":"2024-09-25T11:59:38.000951Z","iopub.status.idle":"2024-09-25T11:59:38.077652Z","shell.execute_reply.started":"2024-09-25T11:59:38.000903Z","shell.execute_reply":"2024-09-25T11:59:38.076436Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Since there are only 10 zipcodes, we can change the datatype of zipcodes to categorical","metadata":{}},{"cell_type":"code","source":"df['zip_code'] = df['zip_code'].astype('category')\ndf.info()","metadata":{"execution":{"iopub.status.busy":"2024-09-25T11:59:38.078954Z","iopub.execute_input":"2024-09-25T11:59:38.079422Z","iopub.status.idle":"2024-09-25T11:59:38.378313Z","shell.execute_reply.started":"2024-09-25T11:59:38.079359Z","shell.execute_reply":"2024-09-25T11:59:38.377078Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Exploratory Data Analysis","metadata":{}},{"cell_type":"code","source":"#Correlation between numerical features\nplt.figure(figsize=(8,6))\ncorrelation_matrix = df[num_cols].corr()\nsns.heatmap(correlation_matrix, annot=True, fmt=\".1f\")\nplt.title('Correlation between Numerical Features')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-09-25T11:59:38.380462Z","iopub.execute_input":"2024-09-25T11:59:38.380897Z","iopub.status.idle":"2024-09-25T11:59:39.151797Z","shell.execute_reply.started":"2024-09-25T11:59:38.380855Z","shell.execute_reply":"2024-09-25T11:59:39.150782Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"loan_amnt and installment are perfectly correlated\n\ntotal_acc is highly correlated with open_acc\n\ntotal_acc is moderately correlated with mort_acc\n\nWe can remove some of these correlated features to avoid multicolinearity","metadata":{}},{"cell_type":"code","source":"#drop installment \ndf.drop(columns=['installment'],axis=1,inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-09-25T11:59:39.153120Z","iopub.execute_input":"2024-09-25T11:59:39.153485Z","iopub.status.idle":"2024-09-25T11:59:39.206853Z","shell.execute_reply.started":"2024-09-25T11:59:39.153433Z","shell.execute_reply":"2024-09-25T11:59:39.205766Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Distribution of categorical variables\nplot = ['term', 'grade', 'sub_grade', 'home_ownership', 'verification_status',\n       'loan_status', 'pub_rec', 'initial_list_status',\n       'application_type', 'pub_rec_bankruptcies']\n\nplt.figure(figsize=(14,20))\ni=1\nfor col in plot:\n  ax=plt.subplot(5,2,i)\n  sns.countplot(x=df[col], palette='Blues')\n  plt.title(f'{col}')\n  i += 1\n\nplt.tight_layout()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-25T11:59:39.208422Z","iopub.execute_input":"2024-09-25T11:59:39.208817Z","iopub.status.idle":"2024-09-25T11:59:41.613000Z","shell.execute_reply.started":"2024-09-25T11:59:39.208778Z","shell.execute_reply":"2024-09-25T11:59:41.611506Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize=(10,3))\nsns.countplot(x=df['zip_code'], palette='Blues')\nplt.title('Distribution of Zip Code')\n\nplt.figure(figsize=(10,3))\nsns.countplot(x=df['purpose'], palette='Blues')\nplt.xticks(rotation=90)\nplt.title('Distribution of Purpose')\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-25T11:59:41.614506Z","iopub.execute_input":"2024-09-25T11:59:41.614962Z","iopub.status.idle":"2024-09-25T11:59:42.272854Z","shell.execute_reply.started":"2024-09-25T11:59:41.614909Z","shell.execute_reply":"2024-09-25T11:59:42.271733Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Observations:\n\nAlmost 80% loans are of 36 months term\n\nMaximum loans (30%) fall in B grade, followed by C,A & D respectively\n\nThe type of home ownership for 50% cases is mortgage\n\nThe target variable (loan status) is imbalanced in the favour of fully-paid loans. Defaulters are approx 25% of fully paid instances.\n\n85% of applicants don't have a public record/haven't filled for bankruptcy\n\n99% applicants have applied under 'individual' application type\n\n55% of loans are taken for the purpose of debt consolidation followed by 20% on credit card","metadata":{}},{"cell_type":"code","source":" #Impact of categorical factors on loan status\n\nplot = ['term', 'grade', 'sub_grade', 'home_ownership', 'verification_status',\n       'zip_code', 'pub_rec', 'initial_list_status',\n       'application_type', 'pub_rec_bankruptcies']\n\nplt.figure(figsize=(14,20))\ni=1\nfor col in plot:\n  ax=plt.subplot(5,2,i)\n\n  data = df.pivot_table(index=col, columns='loan_status', aggfunc='count', values='purpose')\n  data = data.div(data.sum(axis=1), axis=0).multiply(100).round()\n  data.reset_index(inplace=True)\n\n  plt.bar(data[col],data['Charged Off'], color='#00008b')\n  plt.bar(data[col],data['Fully Paid'], color='#add8e6', bottom=data['Charged Off'])\n  plt.xlabel(f'{col}')\n  plt.ylabel('% Applicants')\n  plt.title(f'% Defaulters by {col}')\n  plt.legend(['Charged Off','Fully Paid'])\n  i += 1\n\nplt.tight_layout()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-25T11:59:42.274504Z","iopub.execute_input":"2024-09-25T11:59:42.274973Z","iopub.status.idle":"2024-09-25T11:59:45.400755Z","shell.execute_reply.started":"2024-09-25T11:59:42.274920Z","shell.execute_reply":"2024-09-25T11:59:45.399403Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Impact of Purpose/state on loan status\n\npurpose = df.pivot_table(index='purpose', columns='loan_status', aggfunc='count', values='sub_grade')\npurpose = purpose.div(purpose.sum(axis=1), axis=0).multiply(100).round()\npurpose.reset_index(inplace=True)\n\nplt.figure(figsize=(14,4))\nplt.bar(purpose['purpose'],purpose['Charged Off'], color='#00008b')\nplt.bar(purpose['purpose'],purpose['Fully Paid'], color='#add8e6', bottom=purpose['Charged Off'])\nplt.xlabel('Purpose')\nplt.ylabel('% Applicants')\nplt.title('% Defaulters by purpose')\nplt.legend(['Charged Off','Fully Paid'])\nplt.xticks(rotation=90)\nplt.show()\n\nstate = df.pivot_table(index='state', columns='loan_status', aggfunc='count', values='sub_grade')\nstate = state.div(state.sum(axis=1), axis=0).multiply(100).round()\nstate.reset_index(inplace=True)\n\nplt.figure(figsize=(14,4))\nplt.bar(state['state'],state['Charged Off'], color='#00008b')\nplt.bar(state['state'],state['Fully Paid'], color='#add8e6', bottom=state['Charged Off'])\nplt.xlabel('state')\nplt.ylabel('% Applicants')\nplt.title('% Defaulters by state')\nplt.legend(['Charged Off','Fully Paid'])\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-25T11:59:45.402216Z","iopub.execute_input":"2024-09-25T11:59:45.402665Z","iopub.status.idle":"2024-09-25T11:59:46.773823Z","shell.execute_reply.started":"2024-09-25T11:59:45.402624Z","shell.execute_reply":"2024-09-25T11:59:46.772745Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Observations:\n\nThe % of defaulters is much higher for longer (60-month) term\n\nAs expected, grade/sub-grade has the maximum impact on loan_status with highest grade having maximum defaulters\n\nZip codes such as 11650, 86630 and 93700 have 100% defaulters\n\nWe can remove initial_list_status and state as they have no impact on loan_status\n\npublic records also don't seem to have any impact on loan_status surprisingly\n\nDirect pay application type has higher default rate compared to individual/joint\n\nLoan taken for the purpose of small business has the highest rate of default","metadata":{}},{"cell_type":"code","source":"# Impact of numerical features on loan_status\n\nnum_cols = df.select_dtypes(include='number').columns\n\nfig, ax = plt.subplots(10,2,figsize=(15,40))\ni=0\ncolor_dict = {'Fully Paid': matplotlib.colors.to_rgba('#add8e6', 0.5),\n              'Charged Off': matplotlib.colors.to_rgba('#00008b', 1)}\nfor col in num_cols:\n    sns.histplot(data=df, x=col, hue='loan_status', ax=ax[i, 0], legend=True,\n                palette=color_dict, kde=True, fill=True)\n    sns.boxplot(data=df, y=col, x='loan_status', ax=ax[i,1],\n               palette=('#00008b', '#add8e6'))\n    ax[i,0].set_ylabel(col, fontsize=12)\n    ax[i,0].set_xlabel(' ')\n    ax[i,1].set_xlabel(' ')\n    ax[i,1].set_ylabel(' ')\n    ax[i,1].xaxis.set_tick_params(labelsize=14)\n    i += 1\n\nplt.tight_layout()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-25T11:59:46.775609Z","iopub.execute_input":"2024-09-25T11:59:46.776080Z","iopub.status.idle":"2024-09-25T12:00:13.664692Z","shell.execute_reply.started":"2024-09-25T11:59:46.776029Z","shell.execute_reply":"2024-09-25T12:00:13.663201Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Observations:\n\nFrom the boxplots, it can be observed that the mean loan_amnt, int_rate, dti, open_acc and revol_util are slightly higher for defaulters while annual income is lower","metadata":{}},{"cell_type":"code","source":"# Remove columns which do not have an impact on loan_status\ndf.drop(columns=['initial_list_status','state',\n                 'emp_title', 'title','earliest_cr_line',\n                 'issue_d','sub_grade'], inplace=True)\n\n# Subgrade is removed because grade and subgrade are similar features","metadata":{"execution":{"iopub.status.busy":"2024-09-25T12:00:13.666198Z","iopub.execute_input":"2024-09-25T12:00:13.666697Z","iopub.status.idle":"2024-09-25T12:00:13.755033Z","shell.execute_reply.started":"2024-09-25T12:00:13.666654Z","shell.execute_reply":"2024-09-25T12:00:13.753845Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Data Pre-Processing","metadata":{}},{"cell_type":"code","source":"# Encoding Target Variable\n\ndf['loan_status']=df['loan_status'].map({'Fully Paid': 0, 'Charged Off':1}).astype(int)","metadata":{"execution":{"iopub.status.busy":"2024-09-25T12:00:13.756451Z","iopub.execute_input":"2024-09-25T12:00:13.756833Z","iopub.status.idle":"2024-09-25T12:00:13.766335Z","shell.execute_reply.started":"2024-09-25T12:00:13.756794Z","shell.execute_reply":"2024-09-25T12:00:13.765234Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"x = df.drop(columns=['loan_status'])\nx.reset_index(inplace=True, drop=True)\ny = df['loan_status']\ny.reset_index(drop=True, inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-09-25T12:00:13.767640Z","iopub.execute_input":"2024-09-25T12:00:13.767967Z","iopub.status.idle":"2024-09-25T12:00:13.781788Z","shell.execute_reply.started":"2024-09-25T12:00:13.767931Z","shell.execute_reply":"2024-09-25T12:00:13.780648Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Encoding Binary features into numerical dtype\n\nx['term']=x['term'].map({' 36 months': 36, ' 60 months':60}).astype(int)\nx['pub_rec']=x['pub_rec'].map({'no': 0, 'yes':1}).astype(int)\nx['pub_rec_bankruptcies']=x['pub_rec_bankruptcies'].map({'no': 0, 'yes':1}).astype(int)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-25T12:00:13.783257Z","iopub.execute_input":"2024-09-25T12:00:13.783667Z","iopub.status.idle":"2024-09-25T12:00:13.800858Z","shell.execute_reply.started":"2024-09-25T12:00:13.783627Z","shell.execute_reply":"2024-09-25T12:00:13.799641Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**One Hot Encoding of Categorical Features**","metadata":{}},{"cell_type":"code","source":"cat_cols = x.select_dtypes('category').columns\n\nencoder = OneHotEncoder(sparse=False)\nencoded_data = encoder.fit_transform(x[cat_cols])\nencoded_df = pd.DataFrame(encoded_data, columns=encoder.get_feature_names_out(cat_cols))\nx = pd.concat([x,encoded_df], axis=1)\nx.drop(columns=cat_cols, inplace=True)\nx.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-25T12:00:13.802214Z","iopub.execute_input":"2024-09-25T12:00:13.802667Z","iopub.status.idle":"2024-09-25T12:00:15.088269Z","shell.execute_reply.started":"2024-09-25T12:00:13.802626Z","shell.execute_reply":"2024-09-25T12:00:15.087124Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Train-Test Split**","metadata":{}},{"cell_type":"code","source":"x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.20,stratify=y,random_state=42)","metadata":{"execution":{"iopub.status.busy":"2024-09-25T12:00:15.089791Z","iopub.execute_input":"2024-09-25T12:00:15.090232Z","iopub.status.idle":"2024-09-25T12:00:15.396159Z","shell.execute_reply.started":"2024-09-25T12:00:15.090184Z","shell.execute_reply":"2024-09-25T12:00:15.394918Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"x_train.shape, y_train.shape, x_test.shape, y_test.shape","metadata":{"execution":{"iopub.status.busy":"2024-09-25T12:00:15.397640Z","iopub.execute_input":"2024-09-25T12:00:15.398004Z","iopub.status.idle":"2024-09-25T12:00:15.406547Z","shell.execute_reply.started":"2024-09-25T12:00:15.397966Z","shell.execute_reply":"2024-09-25T12:00:15.405496Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Scaling Numeric Features**","metadata":{}},{"cell_type":"code","source":"scaler = MinMaxScaler()\nx_train = pd.DataFrame(scaler.fit_transform(x_train), columns=x_train.columns)\nx_test = pd.DataFrame(scaler.transform(x_test), columns=x_test.columns)","metadata":{"execution":{"iopub.status.busy":"2024-09-25T12:00:15.408083Z","iopub.execute_input":"2024-09-25T12:00:15.408508Z","iopub.status.idle":"2024-09-25T12:00:15.693709Z","shell.execute_reply.started":"2024-09-25T12:00:15.408444Z","shell.execute_reply":"2024-09-25T12:00:15.692543Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"x_train.tail()","metadata":{"execution":{"iopub.status.busy":"2024-09-25T12:00:15.694979Z","iopub.execute_input":"2024-09-25T12:00:15.695360Z","iopub.status.idle":"2024-09-25T12:00:15.770099Z","shell.execute_reply.started":"2024-09-25T12:00:15.695280Z","shell.execute_reply":"2024-09-25T12:00:15.768971Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Oversampling with SMOTE**","metadata":{}},{"cell_type":"code","source":"# Oversampling to balance the target variable\n\nsm=SMOTE(random_state=42)\nx_train_res, y_train_res = sm.fit_resample(x_train,y_train.ravel())\n\nprint(f\"Before OverSampling, count of label 1: {sum(y_train == 1)}\")\nprint(f\"Before OverSampling, count of label 0: {sum(y_train == 0)}\")\nprint(f\"After OverSampling, count of label 1: {sum(y_train_res == 1)}\")\nprint(f\"After OverSampling, count of label 0: {sum(y_train_res == 0)}\")","metadata":{"execution":{"iopub.status.busy":"2024-09-25T12:00:15.771565Z","iopub.execute_input":"2024-09-25T12:00:15.771944Z","iopub.status.idle":"2024-09-25T12:00:27.896623Z","shell.execute_reply.started":"2024-09-25T12:00:15.771905Z","shell.execute_reply":"2024-09-25T12:00:27.895505Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Logistic Regression","metadata":{}},{"cell_type":"code","source":"model = LogisticRegression()\nmodel.fit(x_train_res, y_train_res)\ntrain_preds = model.predict(x_train)\ntest_preds = model.predict(x_test)\n\n#Model Evaluation\nprint('Train Accuracy :', model.score(x_train, y_train).round(2))\nprint('Train F1 Score:',f1_score(y_train,train_preds).round(2))\nprint('Train Recall Score:',recall_score(y_train,train_preds).round(2))\nprint('Train Precision Score:',precision_score(y_train,train_preds).round(2))\n\nprint('\\nTest Accuracy :',model.score(x_test,y_test).round(2))\nprint('Test F1 Score:',f1_score(y_test,test_preds).round(2))\nprint('Test Recall Score:',recall_score(y_test,test_preds).round(2))\nprint('Test Precision Score:',precision_score(y_test,test_preds).round(2))\n\n# Confusion Matrix\ncm = confusion_matrix(y_test, test_preds)\ndisp = ConfusionMatrixDisplay(cm)\ndisp.plot()\nplt.title('Confusion Matrix')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-25T12:00:27.898022Z","iopub.execute_input":"2024-09-25T12:00:27.898394Z","iopub.status.idle":"2024-09-25T12:00:37.596066Z","shell.execute_reply.started":"2024-09-25T12:00:27.898356Z","shell.execute_reply":"2024-09-25T12:00:37.593640Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Classification Report**","metadata":{}},{"cell_type":"code","source":"print(classification_report(y_test, test_preds))","metadata":{"execution":{"iopub.status.busy":"2024-09-25T12:00:37.597632Z","iopub.execute_input":"2024-09-25T12:00:37.598834Z","iopub.status.idle":"2024-09-25T12:00:37.739958Z","shell.execute_reply.started":"2024-09-25T12:00:37.598787Z","shell.execute_reply":"2024-09-25T12:00:37.738764Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"It can be observed that the recall score is very high (our model is able to identify 80% of actual defaulters) but the precision is low for positive class (of all the predicted defaulters, only 50% are actually defaulters).\n\nAlthough this model is effective in reducing NPAs by flagging most of the defaulters, it may cause loantap to deny loans to many deserving customers due to low precision (false positives)\n\nLow precision has also caused F1 score to drop to 60% even though accuracy is 80%\n","metadata":{}},{"cell_type":"markdown","source":"**Feature Importance**","metadata":{}},{"cell_type":"code","source":"feature_imp = pd.DataFrame({'Columns':x_train.columns, 'Coefficients':model.coef_[0]}).round(2).sort_values('Coefficients', ascending=False)\n\nplt.figure(figsize=(8,8))\nsns.barplot(y = feature_imp['Columns'],\n           x =  feature_imp['Coefficients'])\nplt.title(\"Feature Importance for Model\")\nplt.yticks(fontsize=8)\nplt.ylabel(\"Feature\")\nplt.tight_layout()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-25T12:00:37.741679Z","iopub.execute_input":"2024-09-25T12:00:37.742079Z","iopub.status.idle":"2024-09-25T12:00:38.845971Z","shell.execute_reply.started":"2024-09-25T12:00:37.742037Z","shell.execute_reply":"2024-09-25T12:00:38.844554Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"The model has assigned large weightage to zip_code features followed by dti, open_acc, loan_amnt\n\nSimilarly, large negative coefficients are assigned to a few zip codes, followed by annual income and joint application","metadata":{}},{"cell_type":"markdown","source":"**ROC Curve & AUC**","metadata":{}},{"cell_type":"markdown","source":"The Receiver Operating Characteristic (ROC) curve is a graphical representation of the performance of a binary classification model. It helps evaluate and compare different models by illustrating the trade-off between the true positive rate (TPR) and false positive rate (FPR) at various classification thresholds.\n\nThe ROC curve is created by plotting the TPR on the y-axis against the FPR on the x-axis for different threshold values.\n\nTPR: Also known as sensitivity or recall, is the proportion of true positive predictions out of all actual positive instances.\n\nFPR: Proportion of false positive predictions out of all actual negative instances.\n\nA perfect classifier would have a TPR of 1 and an FPR of 0, resulting in a point at the top-left corner of the ROC curve. On the other hand, a random classifier would have an ROC curve following the diagonal line, as it has an equal chance of producing true positive and false positive predictions.\n\nThe area under the ROC curve (AUC) is a commonly used metric to quantify the overall performance of a classifier.\n\nA perfect classifier would have an AUC of 1, while a random classifier would have an AUC of 0.5. The higher the AUC value, the better the classifier's performance in distinguishing between positive and negative instances.","metadata":{}},{"cell_type":"code","source":"# Predict probabilities for the test set\nprobs = model.predict_proba(x_test)[:,1]\n\n# Compute the false positive rate, true positive rate, and thresholds\nfpr, tpr, thresholds = roc_curve(y_test, probs)\n\n# Compute the area under the ROC curve\nroc_auc = auc(fpr, tpr)\n\n# Plot the ROC curve\nplt.figure()\nplt.plot(fpr, tpr, color='darkorange', lw=2, label='ROC curve (area = %0.2f)' % roc_auc)\nplt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver Operating Characteristic')\nplt.legend(loc=\"lower right\")\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-25T12:00:38.847944Z","iopub.execute_input":"2024-09-25T12:00:38.848425Z","iopub.status.idle":"2024-09-25T12:00:39.218134Z","shell.execute_reply.started":"2024-09-25T12:00:38.848374Z","shell.execute_reply":"2024-09-25T12:00:39.216768Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"AUC of 0.91 signifies that the model is able to discriminate well between the positive and the negative class.\n\nBut it is not a good measure for an imbalanced target variable because it may be high even when the classifier has a poor score on the minority class.\n\nThis can happen when the classifier performs well on the majority class instances, which dominate the dataset. As a result, the AUC may appear high, but the model may not effectively identify the minority class instances.\n\nLets plot the Precision-Recall curve which is more suited for evaluation of imbalanced data","metadata":{}},{"cell_type":"markdown","source":"**Precision Recall Curve**","metadata":{}},{"cell_type":"markdown","source":"The **Precision-Recall** (PR) curve is another graphical representation commonly used to evaluate the performance of a binary classification model. It provides insights into the trade-off between precision and recall at various classification thresholds.\n\n**Precision** represents the proportion of correctly predicted positive instances out of all instances predicted as positive. It focuses on the accuracy of positive predictions.\n**Recall**, also known as sensitivity or true positive rate, represents the proportion of correctly predicted positive instances out of all actual positive instances. It focuses on capturing all positive instances.\nSimilar to the ROC curve, the PR curve is created by plotting recall on the x-axis and precision on the y-axis for different threshold values. The curve illustrates the relationship between precision and recall as the classification threshold changes.\n\nA perfect classifier would have a precision of 1 and a recall of 1, resulting in a point at the top-right corner of the PR curve. Conversely, a random classifier would have a PR curve following the horizontal line defined by the ratio of positive instances in the dataset.\n\nThe **PR curve is useful when dealing with imbalanced datasets**, where the number of negative instances far outweighs the positives. In such cases, the PR curve provides a more comprehensive evaluation of the model's performance compared to the ROC curve. This is because the ROC curve can be misleading when the majority of instances are negative, as it primarily focuses on the true negative rate.\n\nThe area under the PR curve (AUPRC) is a commonly used metric to quantify the overall performance of a classifier. A perfect classifier would have an AUPRC of 1, while a random classifier would have an AUPRC equal to the ratio of positive instances. Generally, a higher AUPRC indicates better performance.","metadata":{}},{"cell_type":"code","source":"# Compute the false precision and recall at all thresholds\nprecision, recall, thresholds = precision_recall_curve(y_test, probs)\n\n# Area under Precision Recall Curve\nauprc = average_precision_score(y_test, probs)\n\n# Plot the precision-recall curve\nplt.plot(recall, precision, marker='.', label='PR curve (area = %0.2f)' % auprc)\nplt.xlabel('Recall')\nplt.ylabel('Precision')\nplt.title('Precision-Recall Curve')\nplt.legend(loc=\"lower left\")\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-25T12:00:39.219737Z","iopub.execute_input":"2024-09-25T12:00:39.220108Z","iopub.status.idle":"2024-09-25T12:00:39.668374Z","shell.execute_reply.started":"2024-09-25T12:00:39.220070Z","shell.execute_reply":"2024-09-25T12:00:39.666877Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"As expected, the area under precision recall curve is not as high. It is a decent model as the area is more than 0.5 (random model benchmark) but there is still scope for improvement","metadata":{}},{"cell_type":"markdown","source":"# Conclusion","metadata":{}},{"cell_type":"markdown","source":"**Q1**. How can we make sure that our model can detect real defaulters and there are less false positives? This is important as we can lose out on an opportunity to finance more individuals and earn interest on it.\n\n**Ans**: Precision score is an indicator of type1 error. Increasing precision score of the model will minimise false positives and ensure that the company is not losing out on the opportunity to finance worthy individuals.","metadata":{}},{"cell_type":"markdown","source":"**Q2**. Since NPA (non-performing asset) is a real problem in this industry, it's important we play safe and shouldn't disburse loans to anyone.\n\n**Ans**: Recall score is an indicator of how many actual defaulters are flagged by the model. By increasing the recall score, we can minimise false negatives (type2 error) and ensure that loans are not disbursed to defaulters.","metadata":{}},{"cell_type":"markdown","source":"**Insights**\n\nImpact of Categorical Attributes on loan_status (target variable):\n\nThe % of defaulters is much higher for longer (60-month) term\n\nAs expected, grade/sub-grade has the maximum impact on loan_status with highest grade having maximum defaulters\n\nZip codes such as 11650, 86630 and 93700 have 100% defaulters\n\nWe can remove initial_list_status and state as they have no impact on loan_status\n\nDirect pay application type has higher default rate compared to individual/joint\n\nLoan taken for the purpose of small business has the highest rate of default\n\nImpact of Numerical Attributes on loan_status (target variable):\n\nIt can be observed that the mean loan_amnt, int_rate, dti, open_acc and revol_util are higher for defaulters\n\nThe mean annual income is lower for defaulters\n\nA Logistic Regression model (trained after upsampling the data to balance the target variable) performed well, rendering accuracy of 80%.\n\nThe model had a precision score of 95%, recall score of 80%, and f1 score of 87% on the negative class\n\nThe model had a precision score of 49%, recall score of 81%, and f1 score of 61% on the positive class\n\nThe ROC plot shows that the area under ROC curve is 0.91, which signifies that the model is able to differentiate well between both classes\n\nThe area under Precision Recall curve is 0.78 (can be improved using hyperparameter tuning/increasing model complexity)\n\n**Recommendations**\n\nThe optimal strategy to achieve the objective of balancing the risk of increasing NPAs by disbursing loans to defaulters with the opportunity to earn interest by disbursing loans to as many worthy \ncustomers as possible: maximise the F1 score along with the area under Precision Recall Curve (precision-recall trade-off)\n\nMore complex classifiers like random forest would give better results compared to logistic regression because they are not restricted by the linearity of decision boundary","metadata":{}}]}