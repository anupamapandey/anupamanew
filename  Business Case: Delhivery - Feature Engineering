{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9103640,"sourceType":"datasetVersion","datasetId":5494304}],"dockerImageVersionId":30746,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-09-04T01:19:39.775149Z","iopub.execute_input":"2024-09-04T01:19:39.775589Z","iopub.status.idle":"2024-09-04T01:19:41.500881Z","shell.execute_reply.started":"2024-09-04T01:19:39.775552Z","shell.execute_reply":"2024-09-04T01:19:41.498940Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/delhivery-data/delhivery_data.csv\n","output_type":"stream"}]},{"cell_type":"markdown","source":"**About Delhivery**\n\nDelhivery is the largest and fastest-growing fully integrated player in India by revenue in Fiscal 2021. They aim to build the operating\nsystem for commerce, through a combination of world-class infrastructure, logistics operations of the highest quality, and cutting-edge\nengineering and technology capabilities. The Data team builds intelligence and capabilities using this data that helps them to widen the\ngap between the quality, efficiency, and profitability of their business versus their competitors.\n\n**How can you help here?**\n\n**The company wants to understand and process the data coming out of data engineering pipelines:**\n• Clean, sanitize and manipulate data to get useful features out of raw fields\n• Make sense out of the raw data and help the data science team to build forecasting models on it","metadata":{}},{"cell_type":"markdown","source":"**Importing Required Libraries**","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib as mlp\nimport matplotlib.pyplot as plt\nimport scipy.stats as spy","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:09.637242Z","iopub.execute_input":"2024-08-11T16:28:09.637719Z","iopub.status.idle":"2024-08-11T16:28:10.345480Z","shell.execute_reply.started":"2024-08-11T16:28:09.637686Z","shell.execute_reply":"2024-08-11T16:28:10.344090Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import warnings\nwarnings.simplefilter('ignore')\n","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:10.347125Z","iopub.execute_input":"2024-08-11T16:28:10.347511Z","iopub.status.idle":"2024-08-11T16:28:10.352959Z","shell.execute_reply.started":"2024-08-11T16:28:10.347480Z","shell.execute_reply":"2024-08-11T16:28:10.351685Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"delhivery_df=pd.read_csv(r\"/kaggle/input/delhivery-data/delhivery_data.csv\")","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:10.356062Z","iopub.execute_input":"2024-08-11T16:28:10.356548Z","iopub.status.idle":"2024-08-11T16:28:12.139084Z","shell.execute_reply.started":"2024-08-11T16:28:10.356508Z","shell.execute_reply":"2024-08-11T16:28:12.137897Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"delhivery_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:12.141450Z","iopub.execute_input":"2024-08-11T16:28:12.141835Z","iopub.status.idle":"2024-08-11T16:28:12.187688Z","shell.execute_reply.started":"2024-08-11T16:28:12.141805Z","shell.execute_reply":"2024-08-11T16:28:12.186538Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**What is the shape of the loaded dataset ?**\n","metadata":{}},{"cell_type":"code","source":"delhivery_df.shape","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:12.189390Z","iopub.execute_input":"2024-08-11T16:28:12.189735Z","iopub.status.idle":"2024-08-11T16:28:12.197004Z","shell.execute_reply.started":"2024-08-11T16:28:12.189705Z","shell.execute_reply":"2024-08-11T16:28:12.195599Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**What are the columns present in the dataset?**","metadata":{}},{"cell_type":"code","source":"delhivery_df.columns","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:12.198569Z","iopub.execute_input":"2024-08-11T16:28:12.199010Z","iopub.status.idle":"2024-08-11T16:28:12.212252Z","shell.execute_reply.started":"2024-08-11T16:28:12.198981Z","shell.execute_reply":"2024-08-11T16:28:12.211079Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**What is the datatype of the columns ?**","metadata":{}},{"cell_type":"code","source":"delhivery_df.dtypes","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:12.213449Z","iopub.execute_input":"2024-08-11T16:28:12.213768Z","iopub.status.idle":"2024-08-11T16:28:12.228179Z","shell.execute_reply.started":"2024-08-11T16:28:12.213743Z","shell.execute_reply":"2024-08-11T16:28:12.226853Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Basic Information about the Dataset**\n","metadata":{}},{"cell_type":"code","source":"delhivery_df.info()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:12.229885Z","iopub.execute_input":"2024-08-11T16:28:12.230342Z","iopub.status.idle":"2024-08-11T16:28:12.345042Z","shell.execute_reply.started":"2024-08-11T16:28:12.230302Z","shell.execute_reply":"2024-08-11T16:28:12.343888Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Dropping unknown fields**\n","metadata":{}},{"cell_type":"code","source":"unknown_fields=['is_cutoff','cutoff_factor','cutoff_timestamp','factor','segment_factor']\ndelhivery_df=delhivery_df.drop(columns=unknown_fields)","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:12.348497Z","iopub.execute_input":"2024-08-11T16:28:12.349157Z","iopub.status.idle":"2024-08-11T16:28:12.371186Z","shell.execute_reply.started":"2024-08-11T16:28:12.349119Z","shell.execute_reply":"2024-08-11T16:28:12.369985Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**How many unique entries present in each column ?**","metadata":{}},{"cell_type":"code","source":"for i in delhivery_df.columns:\n    print(f\"Unique entries for column {i:<30} = {delhivery_df[i].nunique()}\")","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:12.372476Z","iopub.execute_input":"2024-08-11T16:28:12.372818Z","iopub.status.idle":"2024-08-11T16:28:12.539856Z","shell.execute_reply.started":"2024-08-11T16:28:12.372770Z","shell.execute_reply":"2024-08-11T16:28:12.538737Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**For all those columns where number of unique entries is 2, converting the datatype of columns to category**","metadata":{}},{"cell_type":"code","source":"delhivery_df['data'] = delhivery_df['data'].astype('category')\ndelhivery_df['route_type']=delhivery_df['route_type'].astype('category')","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:12.541440Z","iopub.execute_input":"2024-08-11T16:28:12.541799Z","iopub.status.idle":"2024-08-11T16:28:12.569319Z","shell.execute_reply.started":"2024-08-11T16:28:12.541755Z","shell.execute_reply":"2024-08-11T16:28:12.567944Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"delhivery_df.dtypes","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:12.570656Z","iopub.execute_input":"2024-08-11T16:28:12.571021Z","iopub.status.idle":"2024-08-11T16:28:12.580091Z","shell.execute_reply.started":"2024-08-11T16:28:12.570991Z","shell.execute_reply":"2024-08-11T16:28:12.578867Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"floating_columns = ['actual_distance_to_destination', 'actual_time', 'osrm_time', 'osrm_distance',\n 'segment_actual_time', 'segment_osrm_time', 'segment_osrm_distance']\nfor i in floating_columns:\n    print(delhivery_df[i].max())\n","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:12.581718Z","iopub.execute_input":"2024-08-11T16:28:12.582112Z","iopub.status.idle":"2024-08-11T16:28:12.598155Z","shell.execute_reply.started":"2024-08-11T16:28:12.582079Z","shell.execute_reply":"2024-08-11T16:28:12.596869Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**We can update the datatype to float32 since the maximum value entry is small**","metadata":{}},{"cell_type":"code","source":"for i in floating_columns:\n    delhivery_df[i]=delhivery_df[i].astype('float32')","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:12.599397Z","iopub.execute_input":"2024-08-11T16:28:12.599756Z","iopub.status.idle":"2024-08-11T16:28:12.615988Z","shell.execute_reply.started":"2024-08-11T16:28:12.599719Z","shell.execute_reply":"2024-08-11T16:28:12.614683Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Updating the datatype of the datetime columns**","metadata":{}},{"cell_type":"code","source":"datetime_columns = ['trip_creation_time', 'od_start_time', 'od_end_time']\nfor i in datetime_columns:\n delhivery_df[i] = pd.to_datetime(delhivery_df[i])","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:12.617391Z","iopub.execute_input":"2024-08-11T16:28:12.617729Z","iopub.status.idle":"2024-08-11T16:28:12.736725Z","shell.execute_reply.started":"2024-08-11T16:28:12.617700Z","shell.execute_reply":"2024-08-11T16:28:12.735625Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"delhivery_df.info()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:12.738213Z","iopub.execute_input":"2024-08-11T16:28:12.738558Z","iopub.status.idle":"2024-08-11T16:28:12.797992Z","shell.execute_reply.started":"2024-08-11T16:28:12.738528Z","shell.execute_reply":"2024-08-11T16:28:12.796867Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Earlier the dataset was using 25.6+ MB of memory but now it has been reduced to 15.2 + MB. Around 40.63 % reduction in the\nmemory usage.","metadata":{}},{"cell_type":"markdown","source":"What is the time period for which the data is given ?","metadata":{}},{"cell_type":"code","source":"delhivery_df['trip_creation_time'].min(),delhivery_df['od_end_time'].max()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:12.799579Z","iopub.execute_input":"2024-08-11T16:28:12.799944Z","iopub.status.idle":"2024-08-11T16:28:12.809304Z","shell.execute_reply.started":"2024-08-11T16:28:12.799914Z","shell.execute_reply":"2024-08-11T16:28:12.808178Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**1. Basic data cleaning and exploration:**","metadata":{}},{"cell_type":"markdown","source":"Handling missing values in the data\n\nIs there any null values present in the dataset ?","metadata":{}},{"cell_type":"code","source":"np.any(delhivery_df.isnull())","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:12.810619Z","iopub.execute_input":"2024-08-11T16:28:12.811410Z","iopub.status.idle":"2024-08-11T16:28:12.863121Z","shell.execute_reply.started":"2024-08-11T16:28:12.811370Z","shell.execute_reply":"2024-08-11T16:28:12.861709Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**What is the number of null values present in each column ?**","metadata":{}},{"cell_type":"code","source":"delhivery_df.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:12.864654Z","iopub.execute_input":"2024-08-11T16:28:12.865068Z","iopub.status.idle":"2024-08-11T16:28:12.919446Z","shell.execute_reply.started":"2024-08-11T16:28:12.865030Z","shell.execute_reply":"2024-08-11T16:28:12.918239Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"missing_source_name = delhivery_df.loc[delhivery_df['source_name'].isnull(), 'source_center'].unique()\nmissing_source_name","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:12.920715Z","iopub.execute_input":"2024-08-11T16:28:12.921141Z","iopub.status.idle":"2024-08-11T16:28:12.936653Z","shell.execute_reply.started":"2024-08-11T16:28:12.921104Z","shell.execute_reply":"2024-08-11T16:28:12.935647Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"for i in missing_source_name:\n    unique_source_name = delhivery_df.loc[delhivery_df['source_center'] == i, 'source_name'].unique()\n    if pd.isna(unique_source_name):\n         print(\"Source Center :\", i, \"-\" * 10, \"Source Name :\", 'Not Found')\n    else :\n             print(\"Source Center :\", i, \"-\" * 10, \"Source Name :\", unique_source_name)","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:12.938060Z","iopub.execute_input":"2024-08-11T16:28:12.939109Z","iopub.status.idle":"2024-08-11T16:28:13.076320Z","shell.execute_reply.started":"2024-08-11T16:28:12.939062Z","shell.execute_reply":"2024-08-11T16:28:13.075141Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"missing_destination_name=delhivery_df.loc[delhivery_df['destination_name'].isnull(),'destination_center'].unique()\nmissing_destination_name","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:13.078099Z","iopub.execute_input":"2024-08-11T16:28:13.078438Z","iopub.status.idle":"2024-08-11T16:28:13.093652Z","shell.execute_reply.started":"2024-08-11T16:28:13.078411Z","shell.execute_reply":"2024-08-11T16:28:13.092463Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"for i in missing_destination_name:\n    unique_destination_name = delhivery_df.loc[delhivery_df['destination_center'] == i, 'destination_name'].unique()\n    if pd.isna(unique_source_name)  or (unique_source_name.size == 0):\n         print(\"Destination Center :\", i, \"-\" * 10, \"Destination Name :\", 'Not Found')\n    else :\n             print(\"Destination Center :\", i, \"-\" * 10, \"Destination Name :\", unique_destination_name)","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:13.095182Z","iopub.execute_input":"2024-08-11T16:28:13.095529Z","iopub.status.idle":"2024-08-11T16:28:13.267535Z","shell.execute_reply.started":"2024-08-11T16:28:13.095500Z","shell.execute_reply":"2024-08-11T16:28:13.266272Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**The IDs for which the source name is missing, are all those IDs for destination also missing**","metadata":{}},{"cell_type":"code","source":"np.all(delhivery_df.loc[delhivery_df['source_name'].isnull(),'source_center'].isin(missing_destination_name))\n","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:13.269126Z","iopub.execute_input":"2024-08-11T16:28:13.269549Z","iopub.status.idle":"2024-08-11T16:28:13.288232Z","shell.execute_reply.started":"2024-08-11T16:28:13.269512Z","shell.execute_reply":"2024-08-11T16:28:13.286829Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Treating missing destination names and source names**","metadata":{}},{"cell_type":"code","source":"count = 1\nfor i in missing_destination_name:\n    delhivery_df.loc[delhivery_df['destination_center'] == i, 'destination_name'] = delhivery_df.loc[delhivery_df['destination_center'] == i, 'destination_name'].replace(np.nan, f'location_{count}')\n    count += 1","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:13.289554Z","iopub.execute_input":"2024-08-11T16:28:13.290194Z","iopub.status.idle":"2024-08-11T16:28:13.636021Z","shell.execute_reply.started":"2024-08-11T16:28:13.289971Z","shell.execute_reply":"2024-08-11T16:28:13.634904Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"d = {}\nfor i in missing_source_name:\n    d[i] = delhivery_df.loc[delhivery_df['destination_center'] == i, 'destination_name'].unique()\nfor idx, val in d.items():\n    if len(val) == 0:\n        d[idx] = [f'location_{count}']\n        count += 1\nd2 = {}\nfor idx, val in d.items():\n    d2[idx] = val[0]\nfor i, v in d2.items():\n    print(i, v)\n","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:13.637311Z","iopub.execute_input":"2024-08-11T16:28:13.637641Z","iopub.status.idle":"2024-08-11T16:28:13.768873Z","shell.execute_reply.started":"2024-08-11T16:28:13.637613Z","shell.execute_reply":"2024-08-11T16:28:13.767780Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"d = {}\nfor i in missing_source_name:\n    d[i] = delhivery_df.loc[delhivery_df['destination_center'] == i, 'destination_name'].unique()\nfor idx, val in d.items():\n    if len(val) == 0:\n        d[idx] = [f'location_{count}']\n        count += 1\nd2 = {}\nfor idx, val in d.items():\n    d2[idx] = val[0]\nfor i, v in d2.items():\n    print(i, v)","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:13.778583Z","iopub.execute_input":"2024-08-11T16:28:13.778992Z","iopub.status.idle":"2024-08-11T16:28:13.912004Z","shell.execute_reply.started":"2024-08-11T16:28:13.778957Z","shell.execute_reply":"2024-08-11T16:28:13.910846Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"for i in missing_source_name:\n    delhivery_df.loc[delhivery_df['source_center'] == i, 'source_name'] = delhivery_df.loc[delhivery_df['source_center'] == i, 'source_name'].replace(np.nan, d2[i])","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:13.913155Z","iopub.execute_input":"2024-08-11T16:28:13.913465Z","iopub.status.idle":"2024-08-11T16:28:14.199651Z","shell.execute_reply.started":"2024-08-11T16:28:13.913440Z","shell.execute_reply":"2024-08-11T16:28:14.198331Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"delhivery_df.isna().sum()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:14.201366Z","iopub.execute_input":"2024-08-11T16:28:14.201875Z","iopub.status.idle":"2024-08-11T16:28:14.259575Z","shell.execute_reply.started":"2024-08-11T16:28:14.201830Z","shell.execute_reply":"2024-08-11T16:28:14.258334Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Basic Description of the Data","metadata":{}},{"cell_type":"code","source":"delhivery_df.describe()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:14.260832Z","iopub.execute_input":"2024-08-11T16:28:14.261166Z","iopub.status.idle":"2024-08-11T16:28:14.370583Z","shell.execute_reply.started":"2024-08-11T16:28:14.261140Z","shell.execute_reply":"2024-08-11T16:28:14.369492Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"delhivery_df.describe(include = 'object')","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:14.371840Z","iopub.execute_input":"2024-08-11T16:28:14.372156Z","iopub.status.idle":"2024-08-11T16:28:14.528928Z","shell.execute_reply.started":"2024-08-11T16:28:14.372131Z","shell.execute_reply":"2024-08-11T16:28:14.527920Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Merging of rows and aggregation of fields**","metadata":{}},{"cell_type":"markdown","source":"**How to begin\"**","metadata":{}},{"cell_type":"markdown","source":"Since delivery details of one package are divided into several rows (think of it as connecting flights to reach a particular destination). Now think about how we should treat their fields if we combine these rows? What aggregation would make sense if we merge. What would happen to the numeric fields if we merge the rows.","metadata":{}},{"cell_type":"code","source":"grouping_1 = ['trip_uuid', 'source_center', 'destination_center']\ndf1 = delhivery_df.groupby(by = grouping_1, as_index = False).agg({'data' : 'first',\n                                                         'route_type' : 'first',\n                                                       'trip_creation_time' : 'first',\n                                                       'source_name' : 'first',\n                                                       'destination_name' : 'last',\n                                                       'od_start_time' : 'first',\n                                                       'od_end_time' : 'first',\n                                                       'start_scan_to_end_scan' : 'first',\n                                                       'actual_distance_to_destination' : 'last',\n                                                       'actual_time' : 'last',\n                                                       'osrm_time' : 'last',\n                                                       'osrm_distance' : 'last',\n                                                       'segment_actual_time' : 'sum',\n                                                       'segment_osrm_time' : 'sum',\n                                                       'segment_osrm_distance' : 'sum'})","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:14.530420Z","iopub.execute_input":"2024-08-11T16:28:14.530866Z","iopub.status.idle":"2024-08-11T16:28:14.665616Z","shell.execute_reply.started":"2024-08-11T16:28:14.530825Z","shell.execute_reply":"2024-08-11T16:28:14.664449Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df1","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:14.666761Z","iopub.execute_input":"2024-08-11T16:28:14.667117Z","iopub.status.idle":"2024-08-11T16:28:14.696058Z","shell.execute_reply.started":"2024-08-11T16:28:14.667089Z","shell.execute_reply":"2024-08-11T16:28:14.695045Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Calculate the time taken between od_start_time and od_end_time and keep it as a feature. Drop the original columns, if required","metadata":{}},{"cell_type":"code","source":"df1['od_total_time'] = df1['od_end_time'] - df1['od_start_time']\ndf1.drop(columns = ['od_end_time', 'od_start_time'], inplace = True)\ndf1['od_total_time'] = df1['od_total_time'].apply(lambda x : round(x.total_seconds() / 60.0, 2))\ndf1['od_total_time'].head()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:14.697440Z","iopub.execute_input":"2024-08-11T16:28:14.697753Z","iopub.status.idle":"2024-08-11T16:28:14.789616Z","shell.execute_reply.started":"2024-08-11T16:28:14.697726Z","shell.execute_reply":"2024-08-11T16:28:14.788441Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df2 = df1.groupby(by = 'trip_uuid', as_index = False).agg({'source_center' : 'first',\n                                                           'destination_center' : 'last',\n                                                           'data' : 'first',\n                                                           'route_type' : 'first',\n                                                           'trip_creation_time' : 'first',\n                                                           'source_name' : 'first',\n                                                           'destination_name' : 'last',\n                                                           'od_total_time' : 'sum',\n                                                           'start_scan_to_end_scan' : 'sum',\n                                                           'actual_distance_to_destination' : 'sum',\n                                                           'actual_time' : 'sum',\n                                                           'osrm_time' : 'sum',\n                                                           'osrm_distance' : 'sum',\n                                                           'segment_actual_time' : 'sum',\n                                                           'segment_osrm_time' : 'sum',\n                                                           'segment_osrm_distance' : 'sum'})","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:14.791120Z","iopub.execute_input":"2024-08-11T16:28:14.791762Z","iopub.status.idle":"2024-08-11T16:28:14.851270Z","shell.execute_reply.started":"2024-08-11T16:28:14.791721Z","shell.execute_reply":"2024-08-11T16:28:14.850227Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df2","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:14.852586Z","iopub.execute_input":"2024-08-11T16:28:14.853016Z","iopub.status.idle":"2024-08-11T16:28:14.881716Z","shell.execute_reply.started":"2024-08-11T16:28:14.852978Z","shell.execute_reply":"2024-08-11T16:28:14.880497Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**2. Build some features to prepare the data for actual analysis. Extract features from the below fields:\n******","metadata":{}},{"cell_type":"markdown","source":"Source Name: Split and extract features out of destination. City-place-code (State)","metadata":{}},{"cell_type":"code","source":"def location_name_to_state(x):\n    # Check if x is not a string or is None\n    if not isinstance(x, str):\n        return 'Unknown'  # Or handle according to your requirements\n\n    # Proceed with splitting and processing if x is a valid string\n    l = x.split('(')\n    if len(l) == 1:\n        return l[0].strip()  # Remove leading/trailing whitespace\n    else:\n        return l[1].replace(')', \"\").strip()  # Remove trailing ')' and leading/trailing whitespace\n","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:14.883297Z","iopub.execute_input":"2024-08-11T16:28:14.883656Z","iopub.status.idle":"2024-08-11T16:28:14.890633Z","shell.execute_reply.started":"2024-08-11T16:28:14.883618Z","shell.execute_reply":"2024-08-11T16:28:14.889346Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def location_name_to_city(x):\n    if 'location' in x:\n        return 'unknown_city'\n    else:\n        l = x.split()[0].split('_')\n        if 'CCU' in x:\n            return 'Kolkata'\n        elif 'MAA' in x.upper():\n            return 'Chennai'\n        elif ('HBR' in x.upper()) or ('BLR' in x.upper()):\n            return 'Bengaluru'\n        elif 'FBD' in x.upper():\n            return 'Faridabad'\n        elif 'BOM' in x.upper():\n            return 'Mumbai'\n        elif 'DEL' in x.upper():\n            return 'Delhi'\n        elif 'OK' in x.upper():\n            return 'Delhi'\n        elif 'GZB' in x.upper():\n            return 'Ghaziabad'\n        elif 'GGN' in x.upper():\n            return 'Gurgaon'\n        elif 'AMD' in x.upper():\n            return 'Ahmedabad'\n        elif 'CJB' in x.upper():\n            return 'Coimbatore'\n        elif 'HYD' in x.upper():\n            return 'Hyderabad'\n        return l[0]","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:14.892614Z","iopub.execute_input":"2024-08-11T16:28:14.893619Z","iopub.status.idle":"2024-08-11T16:28:14.904563Z","shell.execute_reply.started":"2024-08-11T16:28:14.893575Z","shell.execute_reply":"2024-08-11T16:28:14.903457Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def location_name_to_place(x):\n    if 'location' in x:\n        return x\n    elif 'HBR' in x:\n        return 'HBR Layout PC'\n    else:\n        l = x.split()[0].split('_', 1)\n        if len(l) == 1:\n            return 'unknown_place'\n        else:\n            return l[1]","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:14.906472Z","iopub.execute_input":"2024-08-11T16:28:14.906844Z","iopub.status.idle":"2024-08-11T16:28:14.920695Z","shell.execute_reply.started":"2024-08-11T16:28:14.906807Z","shell.execute_reply":"2024-08-11T16:28:14.919592Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df2['source_state'] = df2['source_name'].apply(location_name_to_state)\ndf2['source_state'].unique()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:14.922595Z","iopub.execute_input":"2024-08-11T16:28:14.923040Z","iopub.status.idle":"2024-08-11T16:28:14.947624Z","shell.execute_reply.started":"2024-08-11T16:28:14.923000Z","shell.execute_reply":"2024-08-11T16:28:14.946293Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df2['source_city'] = df2['source_name'].apply(location_name_to_city)\nprint('No of source cities :', df2['source_city'].nunique())\ndf2['source_city'].unique()[:100]","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:14.949022Z","iopub.execute_input":"2024-08-11T16:28:14.949737Z","iopub.status.idle":"2024-08-11T16:28:15.003373Z","shell.execute_reply.started":"2024-08-11T16:28:14.949705Z","shell.execute_reply":"2024-08-11T16:28:15.002278Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df2['source_place'] = df2['source_name'].apply(location_name_to_place)\ndf2['source_place'].unique()[:100]","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:15.005171Z","iopub.execute_input":"2024-08-11T16:28:15.005489Z","iopub.status.idle":"2024-08-11T16:28:15.028313Z","shell.execute_reply.started":"2024-08-11T16:28:15.005462Z","shell.execute_reply":"2024-08-11T16:28:15.027078Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Destination Name: Split and extract features out of destination. City-place-code (State)**","metadata":{}},{"cell_type":"code","source":"df2['destination_state'] = df2['destination_name'].apply(location_name_to_state)\ndf2['destination_state'].head(10)","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:15.030002Z","iopub.execute_input":"2024-08-11T16:28:15.030478Z","iopub.status.idle":"2024-08-11T16:28:15.053411Z","shell.execute_reply.started":"2024-08-11T16:28:15.030437Z","shell.execute_reply":"2024-08-11T16:28:15.052121Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df2['destination_city'] = df2['destination_name'].apply(location_name_to_city)\ndf2['destination_city'].head()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:15.054860Z","iopub.execute_input":"2024-08-11T16:28:15.055262Z","iopub.status.idle":"2024-08-11T16:28:15.111047Z","shell.execute_reply.started":"2024-08-11T16:28:15.055230Z","shell.execute_reply":"2024-08-11T16:28:15.109965Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df2['destination_place'] = df2['destination_name'].apply(location_name_to_place)\ndf2['destination_place'].head()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:15.112258Z","iopub.execute_input":"2024-08-11T16:28:15.112574Z","iopub.status.idle":"2024-08-11T16:28:15.137251Z","shell.execute_reply.started":"2024-08-11T16:28:15.112547Z","shell.execute_reply":"2024-08-11T16:28:15.136106Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Trip_creation_time: Extract features like month, year and day etc**","metadata":{}},{"cell_type":"code","source":"df2['trip_creation_date'] = pd.to_datetime(df2['trip_creation_time'].dt.date)\ndf2['trip_creation_date'].head()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:15.138574Z","iopub.execute_input":"2024-08-11T16:28:15.138929Z","iopub.status.idle":"2024-08-11T16:28:15.162075Z","shell.execute_reply.started":"2024-08-11T16:28:15.138900Z","shell.execute_reply":"2024-08-11T16:28:15.160873Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df2['trip_creation_day'] = df2['trip_creation_time'].dt.day\ndf2['trip_creation_day'] = df2['trip_creation_day'].astype('int8')\ndf2['trip_creation_day'].head()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:15.163468Z","iopub.execute_input":"2024-08-11T16:28:15.163937Z","iopub.status.idle":"2024-08-11T16:28:15.184057Z","shell.execute_reply.started":"2024-08-11T16:28:15.163894Z","shell.execute_reply":"2024-08-11T16:28:15.182833Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df2['trip_creation_month'] = df2['trip_creation_time'].dt.month\ndf2['trip_creation_month'] = df2['trip_creation_month'].astype('int8')\ndf2['trip_creation_month'].head()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:15.185582Z","iopub.execute_input":"2024-08-11T16:28:15.186028Z","iopub.status.idle":"2024-08-11T16:28:15.198484Z","shell.execute_reply.started":"2024-08-11T16:28:15.185988Z","shell.execute_reply":"2024-08-11T16:28:15.197269Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df2['trip_creation_year'] = df2['trip_creation_time'].dt.year\ndf2['trip_creation_year'] = df2['trip_creation_year'].astype('int16')\ndf2['trip_creation_year'].head()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:15.200034Z","iopub.execute_input":"2024-08-11T16:28:15.200480Z","iopub.status.idle":"2024-08-11T16:28:15.211427Z","shell.execute_reply.started":"2024-08-11T16:28:15.200448Z","shell.execute_reply":"2024-08-11T16:28:15.209926Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df2['trip_creation_week'] = df2['trip_creation_time'].dt.isocalendar().week\ndf2['trip_creation_week'] = df2['trip_creation_week'].astype('int8')\ndf2['trip_creation_week'].head()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:15.212668Z","iopub.execute_input":"2024-08-11T16:28:15.213072Z","iopub.status.idle":"2024-08-11T16:28:15.229217Z","shell.execute_reply.started":"2024-08-11T16:28:15.213039Z","shell.execute_reply":"2024-08-11T16:28:15.228044Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df2['trip_creation_hour'] = df2['trip_creation_time'].dt.hour\ndf2['trip_creation_hour'] = df2['trip_creation_hour'].astype('int8')\ndf2['trip_creation_hour'].head()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:15.230690Z","iopub.execute_input":"2024-08-11T16:28:15.231357Z","iopub.status.idle":"2024-08-11T16:28:15.241848Z","shell.execute_reply.started":"2024-08-11T16:28:15.231324Z","shell.execute_reply":"2024-08-11T16:28:15.240707Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Finding the structure of data after data cleaning","metadata":{}},{"cell_type":"code","source":"df2.shape","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:15.243173Z","iopub.execute_input":"2024-08-11T16:28:15.243502Z","iopub.status.idle":"2024-08-11T16:28:15.251458Z","shell.execute_reply.started":"2024-08-11T16:28:15.243475Z","shell.execute_reply":"2024-08-11T16:28:15.250137Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df2.info()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:15.252657Z","iopub.execute_input":"2024-08-11T16:28:15.254809Z","iopub.status.idle":"2024-08-11T16:28:15.283277Z","shell.execute_reply.started":"2024-08-11T16:28:15.254755Z","shell.execute_reply":"2024-08-11T16:28:15.282014Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df2.describe().T","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:15.284920Z","iopub.execute_input":"2024-08-11T16:28:15.285782Z","iopub.status.idle":"2024-08-11T16:28:15.343582Z","shell.execute_reply.started":"2024-08-11T16:28:15.285738Z","shell.execute_reply":"2024-08-11T16:28:15.342559Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df2.describe(include = object).T","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:15.345297Z","iopub.execute_input":"2024-08-11T16:28:15.345632Z","iopub.status.idle":"2024-08-11T16:28:15.416021Z","shell.execute_reply.started":"2024-08-11T16:28:15.345605Z","shell.execute_reply":"2024-08-11T16:28:15.415023Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"I am intrested to know how many trips are created on the hourly basis","metadata":{}},{"cell_type":"code","source":"df2['trip_creation_hour'].unique()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:15.417080Z","iopub.execute_input":"2024-08-11T16:28:15.417373Z","iopub.status.idle":"2024-08-11T16:28:15.424518Z","shell.execute_reply.started":"2024-08-11T16:28:15.417349Z","shell.execute_reply":"2024-08-11T16:28:15.423546Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_hour=df2.groupby(by ='trip_creation_hour')['trip_uuid'].count().to_frame().reset_index()\ndf_hour.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:15.425839Z","iopub.execute_input":"2024-08-11T16:28:15.426200Z","iopub.status.idle":"2024-08-11T16:28:15.447450Z","shell.execute_reply.started":"2024-08-11T16:28:15.426171Z","shell.execute_reply":"2024-08-11T16:28:15.446400Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize = (12, 6))\nsns.lineplot(data = df_hour, \n             x = df_hour['trip_creation_hour'], \n             y = df_hour['trip_uuid'], \n             markers = '*')\nplt.xticks(np.arange(0,24))\nplt.grid('both')\nplt.plot()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:15.449121Z","iopub.execute_input":"2024-08-11T16:28:15.449573Z","iopub.status.idle":"2024-08-11T16:28:15.944890Z","shell.execute_reply.started":"2024-08-11T16:28:15.449534Z","shell.execute_reply":"2024-08-11T16:28:15.943801Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"It can be inferred from the above plot that the number of trips start increasing after the noon, becomes maximum at 10 P.M and then start decreasing.","metadata":{}},{"cell_type":"markdown","source":"**I am intrested to know how many trips are created for different days of the month**","metadata":{}},{"cell_type":"code","source":"df2['trip_creation_day'].unique()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:15.946391Z","iopub.execute_input":"2024-08-11T16:28:15.946823Z","iopub.status.idle":"2024-08-11T16:28:15.955619Z","shell.execute_reply.started":"2024-08-11T16:28:15.946767Z","shell.execute_reply":"2024-08-11T16:28:15.954339Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_day=df2.groupby(by = 'trip_creation_day')['trip_uuid'].count().to_frame().reset_index()\ndf_day.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:15.957224Z","iopub.execute_input":"2024-08-11T16:28:15.957664Z","iopub.status.idle":"2024-08-11T16:28:15.976665Z","shell.execute_reply.started":"2024-08-11T16:28:15.957615Z","shell.execute_reply":"2024-08-11T16:28:15.975472Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize = (15, 6))\nsns.lineplot(data = df_day, \n             x = df_day['trip_creation_day'], \n             y = df_day['trip_uuid'], \n             markers = 'o')\nplt.xticks(np.arange(1, 32))\nplt.grid('both')\nplt.plot()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:15.978081Z","iopub.execute_input":"2024-08-11T16:28:15.978404Z","iopub.status.idle":"2024-08-11T16:28:16.471313Z","shell.execute_reply.started":"2024-08-11T16:28:15.978378Z","shell.execute_reply":"2024-08-11T16:28:16.470058Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"It can be inferred from the above plot that most of the trips are created in the mid of the month.\n\nThat means customers usually make more orders in the mid of the month.","metadata":{}},{"cell_type":"markdown","source":"**I am intrested to know how many trips are created for different weeks**","metadata":{}},{"cell_type":"code","source":"df2['trip_creation_week'].unique()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:16.472995Z","iopub.execute_input":"2024-08-11T16:28:16.473779Z","iopub.status.idle":"2024-08-11T16:28:16.481804Z","shell.execute_reply.started":"2024-08-11T16:28:16.473732Z","shell.execute_reply":"2024-08-11T16:28:16.480591Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_week=df2.groupby(by = 'trip_creation_week')['trip_uuid'].count().to_frame().reset_index()\ndf_week","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:16.483125Z","iopub.execute_input":"2024-08-11T16:28:16.483515Z","iopub.status.idle":"2024-08-11T16:28:16.502982Z","shell.execute_reply.started":"2024-08-11T16:28:16.483486Z","shell.execute_reply":"2024-08-11T16:28:16.501696Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize = (12, 6))\nsns.lineplot(data = df_week, \n             x = df_week['trip_creation_week'], \n             y = df_week['trip_uuid'], \n             markers = 'o')\nplt.grid('both')\nplt.plot()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:16.504323Z","iopub.execute_input":"2024-08-11T16:28:16.504675Z","iopub.status.idle":"2024-08-11T16:28:16.816840Z","shell.execute_reply.started":"2024-08-11T16:28:16.504644Z","shell.execute_reply":"2024-08-11T16:28:16.815679Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**It can be inferred from the above plot that most of the trips are created in the 38th week.**","metadata":{}},{"cell_type":"markdown","source":"**I am intrested to know how many trips are created in the given two months**","metadata":{}},{"cell_type":"code","source":"df_month = df2.groupby(by = 'trip_creation_month')['trip_uuid'].count().to_frame().reset_index()\ndf_month['perc'] = np.round(df_month['trip_uuid'] * 100/ df_month['trip_uuid'].sum(), 2)\ndf_month.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:16.818483Z","iopub.execute_input":"2024-08-11T16:28:16.818874Z","iopub.status.idle":"2024-08-11T16:28:16.835208Z","shell.execute_reply.started":"2024-08-11T16:28:16.818810Z","shell.execute_reply":"2024-08-11T16:28:16.833978Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.pie(x = df_month['trip_uuid'], \n        labels = ['Sep', 'Oct'],\n        explode = [0, 0.1],\n       autopct = '%.2f%%')\nplt.plot()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:16.836599Z","iopub.execute_input":"2024-08-11T16:28:16.837093Z","iopub.status.idle":"2024-08-11T16:28:16.959714Z","shell.execute_reply.started":"2024-08-11T16:28:16.837052Z","shell.execute_reply":"2024-08-11T16:28:16.958511Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**I am interested to know the distribution of trip data for the orders**","metadata":{}},{"cell_type":"code","source":"df_data = df2.groupby(by = 'data')['trip_uuid'].count().to_frame().reset_index()\ndf_data['perc'] = np.round(df_data['trip_uuid'] * 100/ df_data['trip_uuid'].sum(), 2)\ndf_data.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:16.961389Z","iopub.execute_input":"2024-08-11T16:28:16.962068Z","iopub.status.idle":"2024-08-11T16:28:16.982446Z","shell.execute_reply.started":"2024-08-11T16:28:16.962026Z","shell.execute_reply":"2024-08-11T16:28:16.980885Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.pie(x = df_data['trip_uuid'], \n        labels = df_data['data'],\n        explode = [0, 0.1],\n        autopct = '%.2f%%')\nplt.plot()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:16.984009Z","iopub.execute_input":"2024-08-11T16:28:16.985092Z","iopub.status.idle":"2024-08-11T16:28:17.088746Z","shell.execute_reply.started":"2024-08-11T16:28:16.985046Z","shell.execute_reply":"2024-08-11T16:28:17.087512Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**I am interested to know the distribution of route types for the orders**","metadata":{}},{"cell_type":"code","source":"df_route = df2.groupby(by = 'route_type')['trip_uuid'].count().to_frame().reset_index()\ndf_route['perc'] = np.round(df_route['trip_uuid'] * 100/ df_route['trip_uuid'].sum(), 2)\ndf_route.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:17.090749Z","iopub.execute_input":"2024-08-11T16:28:17.091316Z","iopub.status.idle":"2024-08-11T16:28:17.110376Z","shell.execute_reply.started":"2024-08-11T16:28:17.091265Z","shell.execute_reply":"2024-08-11T16:28:17.109203Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.pie(x = df_route['trip_uuid'], \n        labels = ['Carting', 'FTL'],\n        explode = [0, 0.1],\n        autopct = '%.2f%%')\nplt.plot()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:17.112305Z","iopub.execute_input":"2024-08-11T16:28:17.112726Z","iopub.status.idle":"2024-08-11T16:28:17.227047Z","shell.execute_reply.started":"2024-08-11T16:28:17.112689Z","shell.execute_reply":"2024-08-11T16:28:17.225840Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**I am interested to know what is the distribution of number of trips created from different states**","metadata":{}},{"cell_type":"code","source":"df_source_state = df2.groupby(by = 'source_state')['trip_uuid'].count().to_frame().reset_index()\ndf_source_state['perc'] = np.round(df_source_state['trip_uuid'] * 100/ df_source_state['trip_uuid'].sum(), 2)\ndf_source_state = df_source_state.sort_values(by = 'trip_uuid', ascending = False)\ndf_source_state.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:17.228314Z","iopub.execute_input":"2024-08-11T16:28:17.228632Z","iopub.status.idle":"2024-08-11T16:28:17.251160Z","shell.execute_reply.started":"2024-08-11T16:28:17.228606Z","shell.execute_reply":"2024-08-11T16:28:17.249939Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize = (10, 15))\nsns.barplot(data = df_source_state, \n            x = df_source_state['trip_uuid'], \n            y = df_source_state['source_state'])\nplt.plot()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:17.252854Z","iopub.execute_input":"2024-08-11T16:28:17.253555Z","iopub.status.idle":"2024-08-11T16:28:17.816126Z","shell.execute_reply.started":"2024-08-11T16:28:17.253515Z","shell.execute_reply":"2024-08-11T16:28:17.814732Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"It can be seen in the above plot that maximum trips originated from Maharashtra state followed by Karnataka and Haryana. That means that the seller base is strong in these states","metadata":{}},{"cell_type":"markdown","source":"**I am interested to know top 30 cities based on the number of trips created from different cities**","metadata":{}},{"cell_type":"code","source":"df_source_city = df2.groupby(by = 'source_city')['trip_uuid'].count().to_frame().reset_index()\ndf_source_city['perc'] = np.round(df_source_city['trip_uuid'] * 100/ df_source_city['trip_uuid'].sum(), 2)\ndf_source_city = df_source_city.sort_values(by = 'trip_uuid', ascending = False)[:30]\ndf_source_city","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:17.817768Z","iopub.execute_input":"2024-08-11T16:28:17.818246Z","iopub.status.idle":"2024-08-11T16:28:17.844551Z","shell.execute_reply.started":"2024-08-11T16:28:17.818200Z","shell.execute_reply":"2024-08-11T16:28:17.843431Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize = (10, 10))\nsns.barplot(data = df_source_city, \n            x = df_source_city['trip_uuid'], \n            y = df_source_city['source_city'])\nplt.plot()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:17.845904Z","iopub.execute_input":"2024-08-11T16:28:17.846274Z","iopub.status.idle":"2024-08-11T16:28:18.349367Z","shell.execute_reply.started":"2024-08-11T16:28:17.846244Z","shell.execute_reply":"2024-08-11T16:28:18.348256Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"It can be seen in the above plot that maximum trips originated from Mumbai city followed by Gurgaon Delhi, Bengaluru and Bhiwandi. That means that the seller base is strong in these cities","metadata":{}},{"cell_type":"markdown","source":"**I am interested to know what is the distribution of number of trips which ended in different states**","metadata":{}},{"cell_type":"code","source":"df_destination_state = df2.groupby(by = 'destination_state')['trip_uuid'].count().to_frame().reset_index()\ndf_destination_state['perc'] = np.round(df_destination_state['trip_uuid'] * 100/ df_destination_state['trip_uuid'].sum(), 2)\ndf_destination_state = df_destination_state.sort_values(by = 'trip_uuid', ascending = False)\ndf_destination_state.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:18.351033Z","iopub.execute_input":"2024-08-11T16:28:18.351460Z","iopub.status.idle":"2024-08-11T16:28:18.372503Z","shell.execute_reply.started":"2024-08-11T16:28:18.351421Z","shell.execute_reply":"2024-08-11T16:28:18.371278Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize = (10, 15))\nsns.barplot(data = df_destination_state, \n            x = df_destination_state['trip_uuid'], \n            y = df_destination_state['destination_state'])\nplt.plot()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:18.374411Z","iopub.execute_input":"2024-08-11T16:28:18.374827Z","iopub.status.idle":"2024-08-11T16:28:19.043440Z","shell.execute_reply.started":"2024-08-11T16:28:18.374772Z","shell.execute_reply":"2024-08-11T16:28:19.042307Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"It can be seen in the above plot that maximum trips ended in Maharashtra state followed by Karnataka, Haryana, Tamil Nadu and Uttar Pradesh. That means that the number of orders placed in these states is significantly high in these states.","metadata":{}},{"cell_type":"markdown","source":"**I am interested to know top 30 cities based on the number of trips ended in different cities**","metadata":{}},{"cell_type":"code","source":"df_destination_city = df2.groupby(by = 'destination_city')['trip_uuid'].count().to_frame().reset_index()\ndf_destination_city['perc'] = np.round(df_destination_city['trip_uuid'] * 100/ df_destination_city['trip_uuid'].sum(), 2)\ndf_destination_city = df_destination_city.sort_values(by = 'trip_uuid', ascending = False)[:30]\ndf_destination_city","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:19.044723Z","iopub.execute_input":"2024-08-11T16:28:19.045110Z","iopub.status.idle":"2024-08-11T16:28:19.068614Z","shell.execute_reply.started":"2024-08-11T16:28:19.045073Z","shell.execute_reply":"2024-08-11T16:28:19.067329Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize = (10, 10))\nsns.barplot(data = df_destination_city, \n            x = df_destination_city['trip_uuid'], \n            y = df_destination_city['destination_city'])\nplt.plot()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:28:19.069641Z","iopub.execute_input":"2024-08-11T16:28:19.069979Z","iopub.status.idle":"2024-08-11T16:28:19.618120Z","shell.execute_reply.started":"2024-08-11T16:28:19.069951Z","shell.execute_reply":"2024-08-11T16:28:19.617022Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"It can be seen in the above plot that maximum trips ended in Mumbai city followed by Bengaluru, Gurgaon, Delhi and Chennai. That means that the number of orders placed in these cities is significantly high.","metadata":{}},{"cell_type":"code","source":"numerical_columns = ['od_total_time', 'start_scan_to_end_scan', 'actual_distance_to_destination',\n                    'actual_time', 'osrm_time', 'osrm_distance', 'segment_actual_time',\n                    'segment_osrm_time', 'segment_osrm_distance']\nsns.pairplot(data = df2,\n             vars = numerical_columns,\n             kind = 'reg',\n             hue = 'route_type',\n             markers = '.')\nplt.plot()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:32:14.414897Z","iopub.execute_input":"2024-08-11T16:32:14.415373Z","iopub.status.idle":"2024-08-11T16:34:00.423573Z","shell.execute_reply.started":"2024-08-11T16:32:14.415337Z","shell.execute_reply":"2024-08-11T16:34:00.422337Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_corr = df2[numerical_columns].corr()\ndf_corr","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize = (15, 10))\nsns.heatmap(data = df_corr, vmin = -1, vmax = 1, annot = True)\nplt.plot()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:32:03.800151Z","iopub.execute_input":"2024-08-11T16:32:03.800528Z","iopub.status.idle":"2024-08-11T16:32:04.613181Z","shell.execute_reply.started":"2024-08-11T16:32:03.800495Z","shell.execute_reply":"2024-08-11T16:32:04.612012Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Very High Correlation (> 0.9) exists between columns all the numerical columns specified above","metadata":{}},{"cell_type":"markdown","source":"**3. In-depth analysis and feature engineering:**","metadata":{}},{"cell_type":"markdown","source":"**Compare the difference between od_total_time and start_scan_to_end_scan. Do hypothesis testing/ Visual analysis to check.**","metadata":{}},{"cell_type":"markdown","source":"**STEP-1 : Set up Null Hypothesis**\n\nNull Hypothesis ( H0 ) - od_total_time (Total Trip Time) and start_scan_to_end_scan (Expected total trip time) are same.\n\nAlternate Hypothesis ( HA ) - od_total_time (Total Trip Time) and start_scan_to_end_scan (Expected total trip time) are different.\n\n**STEP-2 : Checking for basic assumpitons for the hypothesis**\n\nDistribution check using QQ Plot\nHomogeneity of Variances using Lavene's test\n\n**STEP-3: Define Test statistics; Distribution of T under H0.**\n\nIf the assumptions of T Test are met then we can proceed performing T Test for independent samples else we will perform the non parametric test equivalent to T Test for independent sample i.e., Mann-Whitney U rank test for two independent samples.\n\n**STEP-4: Compute the p-value and fix value of alpha.**\n\nWe set our alpha to be 0.05\n\n**STEP-5: Compare p-value and alpha.**\n\nBased on p-value, we will accept or reject H0.\n\np-val > alpha : Accept H0\np-val < alpha : Reject H0","metadata":{}},{"cell_type":"code","source":"df2[['od_total_time', 'start_scan_to_end_scan']].describe()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:37:37.595276Z","iopub.execute_input":"2024-08-11T16:37:37.595693Z","iopub.status.idle":"2024-08-11T16:37:37.617033Z","shell.execute_reply.started":"2024-08-11T16:37:37.595665Z","shell.execute_reply":"2024-08-11T16:37:37.615815Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Visual Tests to know if the samples follow normal distribution","metadata":{}},{"cell_type":"code","source":"plt.figure(figsize = (12, 6))\nsns.histplot(df2['od_total_time'], element = 'step', color = 'green')\nsns.histplot(df2['start_scan_to_end_scan'], element = 'step', color = 'pink')\nplt.legend(['od_total_time', 'start_scan_to_end_scan'])\nplt.plot()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:38:17.635168Z","iopub.execute_input":"2024-08-11T16:38:17.635567Z","iopub.status.idle":"2024-08-11T16:38:18.043307Z","shell.execute_reply.started":"2024-08-11T16:38:17.635537Z","shell.execute_reply":"2024-08-11T16:38:18.041651Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Distribution check using QQ Plot","metadata":{}},{"cell_type":"code","source":"plt.figure(figsize = (15, 6))\nplt.subplot(1, 2, 1)\nplt.suptitle('QQ plots for od_total_time and start_scan_to_end_scan')\nspy.probplot(df2['od_total_time'], plot = plt, dist = 'norm')\nplt.title('QQ plot for od_total_time')\nplt.subplot(1, 2, 2)\nspy.probplot(df2['start_scan_to_end_scan'], plot = plt, dist = 'norm')\nplt.title('QQ plot for start_scan_to_end_scan')\nplt.plot()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:39:04.261409Z","iopub.execute_input":"2024-08-11T16:39:04.261869Z","iopub.status.idle":"2024-08-11T16:39:05.316905Z","shell.execute_reply.started":"2024-08-11T16:39:04.261832Z","shell.execute_reply":"2024-08-11T16:39:05.315282Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"It can be seen from the above plots that the samples do not come from normal distribution.","metadata":{}},{"cell_type":"markdown","source":"**Applying Shapiro-Wilk test for normality**","metadata":{}},{"cell_type":"markdown","source":"\n H0: The sample follows normal distribution \n \n HA: The sample does not follow normal distribution\n\nalpha = 0.05\n\nTest Statistics : Shapiro-Wilk test for normality","metadata":{}},{"cell_type":"code","source":"test_stat, p_value = spy.shapiro(df2['od_total_time'].sample(5000))\nprint('p-value', p_value)\nif p_value < 0.05:\n    print('The sample does not follow normal distribution')\nelse:\n    print('The sample follows normal distribution')","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:42:22.867737Z","iopub.execute_input":"2024-08-11T16:42:22.868242Z","iopub.status.idle":"2024-08-11T16:42:22.879269Z","shell.execute_reply.started":"2024-08-11T16:42:22.868205Z","shell.execute_reply":"2024-08-11T16:42:22.877846Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test_stat, p_value = spy.shapiro(df2['start_scan_to_end_scan'].sample(5000))\nprint('p-value', p_value)\nif p_value < 0.05:\n    print('The sample does not follow normal distribution')\nelse:\n    print('The sample follows normal distribution') ","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:42:48.804322Z","iopub.execute_input":"2024-08-11T16:42:48.805442Z","iopub.status.idle":"2024-08-11T16:42:48.815083Z","shell.execute_reply.started":"2024-08-11T16:42:48.805397Z","shell.execute_reply":"2024-08-11T16:42:48.813837Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Transforming the data using boxcox transformation to check if the transformed data follows normal distribution.","metadata":{}},{"cell_type":"code","source":"transformed_od_total_time = spy.boxcox(df2['od_total_time'])[0]\ntest_stat, p_value = spy.shapiro(transformed_od_total_time)\nprint('p-value', p_value)\nif p_value < 0.05:\n    print('The sample does not follow normal distribution')\nelse:\n    print('The sample follows normal distribution') ","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:43:48.470604Z","iopub.execute_input":"2024-08-11T16:43:48.471017Z","iopub.status.idle":"2024-08-11T16:43:48.490238Z","shell.execute_reply.started":"2024-08-11T16:43:48.470982Z","shell.execute_reply":"2024-08-11T16:43:48.488707Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"transformed_start_scan_to_end_scan = spy.boxcox(df2['start_scan_to_end_scan'])[0]\ntest_stat, p_value = spy.shapiro(transformed_start_scan_to_end_scan)\nprint('p-value', p_value)\nif p_value < 0.05:\n    print('The sample does not follow normal distribution')\nelse:\n    print('The sample follows normal distribution')","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:44:07.516600Z","iopub.execute_input":"2024-08-11T16:44:07.517045Z","iopub.status.idle":"2024-08-11T16:44:07.537554Z","shell.execute_reply.started":"2024-08-11T16:44:07.517011Z","shell.execute_reply":"2024-08-11T16:44:07.536168Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Even after applying the boxcox transformation on each of the \"od_total_time\" and \"start_scan_to_end_scan\" columns, the distributions do not follow normal distribution.\n\n**Homogeneity of Variances using Lavene's test**","metadata":{}},{"cell_type":"code","source":"test_stat, p_value = spy.levene(df2['od_total_time'], df2['start_scan_to_end_scan'])\nprint('p-value', p_value)\nif p_value < 0.05:\n    print('The samples do not have  Homogenous Variance')\nelse:\n    print('The samples have Homogenous Variance ') ","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:45:10.648271Z","iopub.execute_input":"2024-08-11T16:45:10.648670Z","iopub.status.idle":"2024-08-11T16:45:10.657470Z","shell.execute_reply.started":"2024-08-11T16:45:10.648642Z","shell.execute_reply":"2024-08-11T16:45:10.656395Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Since the samples are not normally distributed, T-Test cannot be applied here, we can perform its non parametric equivalent test i.e., Mann-Whitney U rank test for two independent samples.","metadata":{}},{"cell_type":"code","source":"test_stat, p_value = spy.mannwhitneyu(df2['od_total_time'], df2['start_scan_to_end_scan'])\nprint('P-value :',p_value)","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:46:11.924068Z","iopub.execute_input":"2024-08-11T16:46:11.924483Z","iopub.status.idle":"2024-08-11T16:46:11.966349Z","shell.execute_reply.started":"2024-08-11T16:46:11.924451Z","shell.execute_reply":"2024-08-11T16:46:11.965088Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Since p-value > alpha therfore it can be concluded that od_total_time and start_scan_to_end_scan are similar.","metadata":{}},{"cell_type":"markdown","source":"# **Do hypothesis testing / visual analysis between actual_time aggregated value and OSRM time aggregated value (aggregated values are the values you’ll get after merging the rows on the basis of trip_uuid)**","metadata":{}},{"cell_type":"code","source":"df2[['actual_time', 'osrm_time']].describe()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:47:39.315001Z","iopub.execute_input":"2024-08-11T16:47:39.315436Z","iopub.status.idle":"2024-08-11T16:47:39.338203Z","shell.execute_reply.started":"2024-08-11T16:47:39.315404Z","shell.execute_reply":"2024-08-11T16:47:39.336763Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Visual Tests to know if the samples follow normal distribution","metadata":{}},{"cell_type":"code","source":"plt.figure(figsize = (12, 6))\nsns.histplot(df2['actual_time'], element = 'step', color = 'green')\nsns.histplot(df2['osrm_time'], element = 'step', color = 'lightblue')\nplt.legend(['actual_time', 'osrm_time'])\nplt.plot()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:48:16.929391Z","iopub.execute_input":"2024-08-11T16:48:16.929817Z","iopub.status.idle":"2024-08-11T16:48:17.297425Z","shell.execute_reply.started":"2024-08-11T16:48:16.929770Z","shell.execute_reply":"2024-08-11T16:48:17.296111Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Distribution check using QQ Plot","metadata":{}},{"cell_type":"code","source":"plt.figure(figsize = (15, 6))\nplt.subplot(1, 2, 1)\nplt.suptitle('QQ plots for actual_time and osrm_time')\nspy.probplot(df2['actual_time'], plot = plt, dist = 'norm')\nplt.title('QQ plot for actual_time')\nplt.subplot(1, 2, 2)\nspy.probplot(df2['osrm_time'], plot = plt, dist = 'norm')\nplt.title('QQ plot for osrm_time')\nplt.plot()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:49:00.425837Z","iopub.execute_input":"2024-08-11T16:49:00.426282Z","iopub.status.idle":"2024-08-11T16:49:01.128258Z","shell.execute_reply.started":"2024-08-11T16:49:00.426251Z","shell.execute_reply":"2024-08-11T16:49:01.127020Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"It can be seen from the above plots that the samples do not come from normal distribution.","metadata":{}},{"cell_type":"markdown","source":"**Applying Shapiro-Wilk test for normality**\n\n H0: The sample follows normal distribution \n \n HA: The sample does not follow normal distribution\n\nalpha = 0.05\n\n**Test Statistics : Shapiro-Wilk test for normality**","metadata":{}},{"cell_type":"code","source":"test_stat, p_value = spy.shapiro(df2['actual_time'].sample(5000))\nprint('p-value', p_value)\nif p_value < 0.05:\n    print('The sample does not follow normal distribution')\nelse:\n    print('The sample follows normal distribution')    ","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:50:42.203540Z","iopub.execute_input":"2024-08-11T16:50:42.203987Z","iopub.status.idle":"2024-08-11T16:50:42.212843Z","shell.execute_reply.started":"2024-08-11T16:50:42.203954Z","shell.execute_reply":"2024-08-11T16:50:42.211635Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test_stat, p_value = spy.shapiro(df2['osrm_time'].sample(5000))\nprint('p-value', p_value)\nif p_value < 0.05:\n    print('The sample does not follow normal distribution')\nelse:\n    print('The sample follows normal distribution')  ","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:51:00.403682Z","iopub.execute_input":"2024-08-11T16:51:00.404224Z","iopub.status.idle":"2024-08-11T16:51:00.413249Z","shell.execute_reply.started":"2024-08-11T16:51:00.404189Z","shell.execute_reply":"2024-08-11T16:51:00.411873Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Transforming the data using boxcox transformation to check if the transformed data follows normal distribution.**","metadata":{}},{"cell_type":"code","source":"transformed_actual_time = spy.boxcox(df2['actual_time'])[0]\ntest_stat, p_value = spy.shapiro(transformed_actual_time)\nprint('p-value', p_value)\nif p_value < 0.05:\n    print('The sample does not follow normal distribution')\nelse:\n    print('The sample follows normal distribution') ","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:51:45.702230Z","iopub.execute_input":"2024-08-11T16:51:45.702624Z","iopub.status.idle":"2024-08-11T16:51:45.726150Z","shell.execute_reply.started":"2024-08-11T16:51:45.702589Z","shell.execute_reply":"2024-08-11T16:51:45.724878Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"transformed_osrm_time = spy.boxcox(df2['osrm_time'])[0]\ntest_stat, p_value = spy.shapiro(transformed_osrm_time)\nprint('p-value', p_value)\nif p_value < 0.05:\n    print('The sample does not follow normal distribution')\nelse:\n    print('The sample follows normal distribution')","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:52:03.531031Z","iopub.execute_input":"2024-08-11T16:52:03.531431Z","iopub.status.idle":"2024-08-11T16:52:03.554471Z","shell.execute_reply.started":"2024-08-11T16:52:03.531402Z","shell.execute_reply":"2024-08-11T16:52:03.553189Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Even after applying the boxcox transformation on each of the \"actual_time\" and \"osrm_time\" columns, the distributions do not follow normal distribution.\n\n**Homogeneity of Variances using Lavene's test**","metadata":{}},{"cell_type":"code","source":"# Null Hypothesis(H0) - Homogenous Variance \n\n# Alternate Hypothesis(HA) - Non Homogenous Variance \n\ntest_stat, p_value = spy.levene(df2['actual_time'], df2['osrm_time'])\nprint('p-value', p_value)\nif p_value < 0.05:\n    print('The samples do not have  Homogenous Variance')\nelse:\n    print('The samples have Homogenous Variance ') ","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:52:55.606087Z","iopub.execute_input":"2024-08-11T16:52:55.606501Z","iopub.status.idle":"2024-08-11T16:52:55.615380Z","shell.execute_reply.started":"2024-08-11T16:52:55.606473Z","shell.execute_reply":"2024-08-11T16:52:55.614188Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Since the samples do not follow any of the assumptions T-Test cannot be applied here, we can perform its non parametric equivalent test i.e., Mann-Whitney U rank test for two independent samples.","metadata":{}},{"cell_type":"code","source":"test_stat, p_value = spy.mannwhitneyu(df2['actual_time'], df2['osrm_time'])\nprint('p-value', p_value)\nif p_value < 0.05:\n    print('The samples are not similar')\nelse:\n    print('The samples are similar ') ","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:53:30.840741Z","iopub.execute_input":"2024-08-11T16:53:30.841135Z","iopub.status.idle":"2024-08-11T16:53:30.880718Z","shell.execute_reply.started":"2024-08-11T16:53:30.841106Z","shell.execute_reply":"2024-08-11T16:53:30.879507Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Since p-value < alpha therfore it can be concluded that actual_time and osrm_time are not similar.","metadata":{}},{"cell_type":"markdown","source":"# **Do hypothesis testing/ visual analysis between actual_time aggregated value and segment actual time aggregated value (aggregated values are the values you’ll get after merging the rows on the basis of trip_uuid)**","metadata":{}},{"cell_type":"code","source":"df2[['actual_time','segment_actual_time']].describe()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:55:07.473441Z","iopub.execute_input":"2024-08-11T16:55:07.473893Z","iopub.status.idle":"2024-08-11T16:55:07.496378Z","shell.execute_reply.started":"2024-08-11T16:55:07.473857Z","shell.execute_reply":"2024-08-11T16:55:07.495069Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Visual Tests to know if the samples follow normal distribution","metadata":{}},{"cell_type":"code","source":"plt.figure(figsize = (12, 6))\nsns.histplot(df2['actual_time'], element = 'step', color = 'magenta')\nsns.histplot(df2['segment_actual_time'], element = 'step', color = 'lightgreen')\nplt.legend(['actual_time', 'segment_actual_time'])\nplt.plot()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:55:38.530672Z","iopub.execute_input":"2024-08-11T16:55:38.531644Z","iopub.status.idle":"2024-08-11T16:55:38.903609Z","shell.execute_reply.started":"2024-08-11T16:55:38.531608Z","shell.execute_reply":"2024-08-11T16:55:38.902423Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Distribution check using QQ Plot","metadata":{}},{"cell_type":"code","source":"plt.figure(figsize = (15, 6))\nplt.subplot(1, 2, 1)\nplt.suptitle('QQ plots for actual_time and segment_actual_time')\nspy.probplot(df2['actual_time'], plot = plt, dist = 'norm')\nplt.title('QQ plot for actual_time')\nplt.subplot(1, 2, 2)\nspy.probplot(df2['segment_actual_time'], plot = plt, dist = 'norm')\nplt.title('QQ plot for segment_actual_time')\nplt.plot()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T16:57:09.598246Z","iopub.execute_input":"2024-08-11T16:57:09.598725Z","iopub.status.idle":"2024-08-11T16:57:10.357094Z","shell.execute_reply.started":"2024-08-11T16:57:09.598686Z","shell.execute_reply":"2024-08-11T16:57:10.355685Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"It can be seen from the above plots that the samples do not come from normal distribution.\n**Applying Shapiro-Wilk test for normality**\n\nH0 : The sample follows normal distribution\n\nHA : The sample does not follow normal distribution\n\nalpha = 0.05\n**\n**Test Statistics : Shapiro-Wilk test for normality****","metadata":{}},{"cell_type":"code","source":"test_stat, p_value = spy.shapiro(df2['actual_time'].sample(5000))\nprint('p-value', p_value)\nif p_value < 0.05:\n    print('The sample does not follow normal distribution')\nelse:\n    print('The sample follows normal distribution')    ","metadata":{"execution":{"iopub.status.busy":"2024-08-11T17:01:56.710600Z","iopub.execute_input":"2024-08-11T17:01:56.711929Z","iopub.status.idle":"2024-08-11T17:01:56.722240Z","shell.execute_reply.started":"2024-08-11T17:01:56.711883Z","shell.execute_reply":"2024-08-11T17:01:56.720298Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test_stat, p_value = spy.shapiro(df2['segment_actual_time'].sample(5000))\nprint('p-value', p_value)\nif p_value < 0.05:\n    print('The sample does not follow normal distribution')\nelse:\n    print('The sample follows normal distribution') ","metadata":{"execution":{"iopub.status.busy":"2024-08-11T17:02:07.722521Z","iopub.execute_input":"2024-08-11T17:02:07.722998Z","iopub.status.idle":"2024-08-11T17:02:07.731574Z","shell.execute_reply.started":"2024-08-11T17:02:07.722958Z","shell.execute_reply":"2024-08-11T17:02:07.730360Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Transforming the data using boxcox transformation to check if the transformed data follows normal distribution.","metadata":{}},{"cell_type":"code","source":"transformed_actual_time = spy.boxcox(df2['actual_time'])[0]\ntest_stat, p_value = spy.shapiro(transformed_actual_time)\nprint('p-value', p_value)\nif p_value < 0.05:\n    print('The sample does not follow normal distribution')\nelse:\n    print('The sample follows normal distribution') ","metadata":{"execution":{"iopub.status.busy":"2024-08-11T17:03:22.780938Z","iopub.execute_input":"2024-08-11T17:03:22.781449Z","iopub.status.idle":"2024-08-11T17:03:22.811317Z","shell.execute_reply.started":"2024-08-11T17:03:22.781406Z","shell.execute_reply":"2024-08-11T17:03:22.810133Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"transformed_segment_actual_time = spy.boxcox(df2['segment_actual_time'])[0]\ntest_stat, p_value = spy.shapiro(transformed_segment_actual_time)\nprint('p-value', p_value)\nif p_value < 0.05:\n    print('The sample does not follow normal distribution')\nelse:\n    print('The sample follows normal distribution')","metadata":{"execution":{"iopub.status.busy":"2024-08-11T17:03:39.459134Z","iopub.execute_input":"2024-08-11T17:03:39.459522Z","iopub.status.idle":"2024-08-11T17:03:39.481515Z","shell.execute_reply.started":"2024-08-11T17:03:39.459489Z","shell.execute_reply":"2024-08-11T17:03:39.480418Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Even after applying the boxcox transformation on each of the \"actual_time\" and \"segment_actual_time\" columns, the distributions do not follow normal distribution.","metadata":{}},{"cell_type":"markdown","source":"**Homogeneity of Variances using Lavene's test**","metadata":{}},{"cell_type":"code","source":"# Null Hypothesis(H0) - Homogenous Variance \n\n# Alternate Hypothesis(HA) - Non Homogenous Variance \n\ntest_stat, p_value = spy.levene(df2['actual_time'], df2['segment_actual_time'])\nprint('p-value', p_value)\n\nif p_value < 0.05:\n    print('The samples do not have Homogenous Variance')\nelse:\n    print('The samples have Homogenous Variance ') ","metadata":{"execution":{"iopub.status.busy":"2024-08-11T17:04:53.310225Z","iopub.execute_input":"2024-08-11T17:04:53.310666Z","iopub.status.idle":"2024-08-11T17:04:53.319999Z","shell.execute_reply.started":"2024-08-11T17:04:53.310634Z","shell.execute_reply":"2024-08-11T17:04:53.318797Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Since the samples do not come from normal distribution T-Test cannot be applied here, we can perform its non parametric equivalent test i.e., Mann-Whitney U rank test for two independent samples.","metadata":{}},{"cell_type":"code","source":"test_stat, p_value = spy.mannwhitneyu(df2['actual_time'], df2['segment_actual_time'])\nprint('p-value', p_value)\nif p_value < 0.05:\n    print('The samples are not similar')\nelse:\n    print('The samples are similar ') ","metadata":{"execution":{"iopub.status.busy":"2024-08-11T17:05:30.166971Z","iopub.execute_input":"2024-08-11T17:05:30.167407Z","iopub.status.idle":"2024-08-11T17:05:30.206905Z","shell.execute_reply.started":"2024-08-11T17:05:30.167366Z","shell.execute_reply":"2024-08-11T17:05:30.205700Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Since p-value > alpha therfore it can be concluded that actual_time and segment_actual_time are similar.","metadata":{}},{"cell_type":"markdown","source":"# **Do hypothesis testing/ visual analysis between osrm distance aggregated value and segment osrm distance aggregated value (aggregated values are the values you’ll get after merging the rows on the basis of trip_uuid)**","metadata":{}},{"cell_type":"code","source":"df2[['osrm_distance', 'segment_osrm_distance']].describe()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T17:06:45.281941Z","iopub.execute_input":"2024-08-11T17:06:45.282384Z","iopub.status.idle":"2024-08-11T17:06:45.304254Z","shell.execute_reply.started":"2024-08-11T17:06:45.282351Z","shell.execute_reply":"2024-08-11T17:06:45.303011Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Visual Tests to know if the samples follow normal distribution","metadata":{}},{"cell_type":"code","source":"plt.figure(figsize = (12, 6))\nsns.histplot(df2['osrm_distance'], element = 'step', color = 'green', bins = 1000)\nsns.histplot(df2['segment_osrm_distance'], element = 'step', color = 'pink', bins = 1000)\nplt.legend(['osrm_distance', 'segment_osrm_distance'])\nplt.plot()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T17:07:21.102749Z","iopub.execute_input":"2024-08-11T17:07:21.103766Z","iopub.status.idle":"2024-08-11T17:07:21.474949Z","shell.execute_reply.started":"2024-08-11T17:07:21.103719Z","shell.execute_reply":"2024-08-11T17:07:21.473738Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Distribution check using QQ Plot","metadata":{}},{"cell_type":"code","source":"plt.figure(figsize = (15, 6))\nplt.subplot(1, 2, 1)\nplt.suptitle('QQ plots for osrm_distance and segment_osrm_distance')\nspy.probplot(df2['osrm_distance'], plot = plt, dist = 'norm')\nplt.title('QQ plot for osrm_distance')\nplt.subplot(1, 2, 2)\nspy.probplot(df2['segment_osrm_distance'], plot = plt, dist = 'norm')\nplt.title('QQ plot for segment_osrm_distance')\nplt.plot()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T17:07:58.543869Z","iopub.execute_input":"2024-08-11T17:07:58.544256Z","iopub.status.idle":"2024-08-11T17:07:59.270290Z","shell.execute_reply.started":"2024-08-11T17:07:58.544227Z","shell.execute_reply":"2024-08-11T17:07:59.268869Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"It can be seen from the above plots that the samples do not come from normal distribution.\n\n**Applying Shapiro-Wilk test for normality**\n\nH0 : The sample follows normal distribution \nHA : The sample does not follow normal distribution\n\nalpha = 0.05\n\n**Test Statistics : Shapiro-Wilk test for normality**","metadata":{}},{"cell_type":"code","source":"test_stat, p_value = spy.shapiro(df2['osrm_distance'].sample(5000))\nprint('p-value', p_value)\nif p_value < 0.05:\n    print('The sample does not follow normal distribution')\nelse:\n    print('The sample follows normal distribution') ","metadata":{"execution":{"iopub.status.busy":"2024-08-11T17:09:09.247831Z","iopub.execute_input":"2024-08-11T17:09:09.248278Z","iopub.status.idle":"2024-08-11T17:09:09.257443Z","shell.execute_reply.started":"2024-08-11T17:09:09.248246Z","shell.execute_reply":"2024-08-11T17:09:09.256231Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test_stat, p_value = spy.shapiro(df2['segment_osrm_distance'].sample(5000))\nprint('p-value', p_value)\nif p_value < 0.05:\n    print('The sample does not follow normal distribution')\nelse:\n    print('The sample follows normal distribution')  ","metadata":{"execution":{"iopub.status.busy":"2024-08-11T17:09:25.470936Z","iopub.execute_input":"2024-08-11T17:09:25.471401Z","iopub.status.idle":"2024-08-11T17:09:25.480999Z","shell.execute_reply.started":"2024-08-11T17:09:25.471366Z","shell.execute_reply":"2024-08-11T17:09:25.479705Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Transforming the data using boxcox transformation to check if the transformed data follows normal distribution.","metadata":{}},{"cell_type":"code","source":"transformed_osrm_distance = spy.boxcox(df2['osrm_distance'])[0]\ntest_stat, p_value = spy.shapiro(transformed_osrm_distance)\nprint('p-value', p_value)\nif p_value < 0.05:\n    print('The sample does not follow normal distribution')\nelse:\n    print('The sample follows normal distribution') ","metadata":{"execution":{"iopub.status.busy":"2024-08-11T17:10:01.538672Z","iopub.execute_input":"2024-08-11T17:10:01.539102Z","iopub.status.idle":"2024-08-11T17:10:01.563881Z","shell.execute_reply.started":"2024-08-11T17:10:01.539069Z","shell.execute_reply":"2024-08-11T17:10:01.562522Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"transformed_segment_osrm_distance = spy.boxcox(df2['segment_osrm_distance'])[0]\ntest_stat, p_value = spy.shapiro(transformed_segment_osrm_distance)\nprint('p-value', p_value)\nif p_value < 0.05:\n    print('The sample does not follow normal distribution')\nelse:\n    print('The sample follows normal distribution')","metadata":{"execution":{"iopub.status.busy":"2024-08-11T17:10:23.041315Z","iopub.execute_input":"2024-08-11T17:10:23.041727Z","iopub.status.idle":"2024-08-11T17:10:23.065942Z","shell.execute_reply.started":"2024-08-11T17:10:23.041699Z","shell.execute_reply":"2024-08-11T17:10:23.064670Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Even after applying the boxcox transformation on each of the \"osrm_distance\" and \"segment_osrm_distance\" columns, the distributions do not follow normal distribution.\n\n**Homogeneity of Variances using Lavene's test**","metadata":{}},{"cell_type":"code","source":"# Null Hypothesis(H0) - Homogenous Variance \n\n# Alternate Hypothesis(HA) - Non Homogenous Variance \n\ntest_stat, p_value = spy.levene(df2['osrm_distance'], df2['segment_osrm_distance'])\nprint('p-value', p_value)\n\nif p_value < 0.05:\n    print('The samples do not have Homogenous Variance')\nelse:\n    print('The samples have Homogenous Variance ') ","metadata":{"execution":{"iopub.status.busy":"2024-08-11T17:11:17.752206Z","iopub.execute_input":"2024-08-11T17:11:17.752634Z","iopub.status.idle":"2024-08-11T17:11:17.761514Z","shell.execute_reply.started":"2024-08-11T17:11:17.752603Z","shell.execute_reply":"2024-08-11T17:11:17.760146Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Since the samples do not follow any of the assumptions, T-Test cannot be applied here. We can perform its non parametric equivalent test i.e., Mann-Whitney U rank test for two independent samples.","metadata":{}},{"cell_type":"code","source":"test_stat, p_value = spy.mannwhitneyu(df2['osrm_distance'], df2['segment_osrm_distance'])\nprint('p-value', p_value)\nif p_value < 0.05:\n    print('The samples are not similar')\nelse:\n    print('The samples are similar ') ","metadata":{"execution":{"iopub.status.busy":"2024-08-11T17:11:50.342769Z","iopub.execute_input":"2024-08-11T17:11:50.343678Z","iopub.status.idle":"2024-08-11T17:11:50.386558Z","shell.execute_reply.started":"2024-08-11T17:11:50.343639Z","shell.execute_reply":"2024-08-11T17:11:50.385088Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Since p-value < alpha therfore it can be concluded that osrm_distance and segment_osrm_distance are not similar.","metadata":{}},{"cell_type":"markdown","source":"**Do hypothesis testing/ visual analysis between osrm time aggregated value and segment osrm time aggregated value (aggregated values are the values you’ll get after merging the rows on the basis of trip_uuid)**","metadata":{}},{"cell_type":"code","source":"df2[['osrm_time', 'segment_osrm_time']].describe().T","metadata":{"execution":{"iopub.status.busy":"2024-08-11T17:12:44.118125Z","iopub.execute_input":"2024-08-11T17:12:44.118982Z","iopub.status.idle":"2024-08-11T17:12:44.148417Z","shell.execute_reply.started":"2024-08-11T17:12:44.118932Z","shell.execute_reply":"2024-08-11T17:12:44.146884Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Visual Tests to know if the samples follow normal distribution","metadata":{}},{"cell_type":"code","source":"plt.figure(figsize = (12, 6))\nsns.histplot(df2['osrm_time'], element = 'step', color = 'green', bins = 1000)\nsns.histplot(df2['segment_osrm_time'], element = 'step', color = 'pink', bins = 1000)\nplt.legend(['osrm_time', 'segment_osrm_time'])\nplt.plot()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T17:13:23.038427Z","iopub.execute_input":"2024-08-11T17:13:23.038932Z","iopub.status.idle":"2024-08-11T17:13:23.414589Z","shell.execute_reply.started":"2024-08-11T17:13:23.038885Z","shell.execute_reply":"2024-08-11T17:13:23.413483Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Distribution check using QQ Plot","metadata":{}},{"cell_type":"code","source":"plt.figure(figsize = (15, 6))\nplt.subplot(1, 2, 1)\nplt.suptitle('QQ plots for osrm_time and segment_osrm_time')\nspy.probplot(df2['osrm_time'], plot = plt, dist = 'norm')\nplt.title('QQ plot for osrm_time')\nplt.subplot(1, 2, 2)\nspy.probplot(df2['segment_osrm_time'], plot = plt, dist = 'norm')\nplt.title('QQ plot for segment_osrm_time')\nplt.plot()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T17:14:02.724631Z","iopub.execute_input":"2024-08-11T17:14:02.725541Z","iopub.status.idle":"2024-08-11T17:14:03.439122Z","shell.execute_reply.started":"2024-08-11T17:14:02.725502Z","shell.execute_reply":"2024-08-11T17:14:03.437851Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"It can be seen from the above plots that the samples do not come from normal distribution.\n\n**Applying Shapiro-Wilk test for normality**\n\n H0: The sample follows normal distribution \n \n HA: The sample does not follow normal distribution\n\nalpha = 0.05\n\n**Test Statistics : Shapiro-Wilk test for normality**","metadata":{}},{"cell_type":"code","source":"test_stat, p_value = spy.shapiro(df2['osrm_time'].sample(5000))\nprint('p-value', p_value)\nif p_value < 0.05:\n    print('The sample does not follow normal distribution')\nelse:\n    print('The sample follows normal distribution')  ","metadata":{"execution":{"iopub.status.busy":"2024-08-11T17:15:12.694719Z","iopub.execute_input":"2024-08-11T17:15:12.695164Z","iopub.status.idle":"2024-08-11T17:15:12.704481Z","shell.execute_reply.started":"2024-08-11T17:15:12.695129Z","shell.execute_reply":"2024-08-11T17:15:12.703302Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test_stat, p_value = spy.shapiro(df2['segment_osrm_time'].sample(5000))\nprint('p-value', p_value)\nif p_value < 0.05:\n    print('The sample does not follow normal distribution')\nelse:\n    print('The sample follows normal distribution')  ","metadata":{"execution":{"iopub.status.busy":"2024-08-11T17:15:38.695833Z","iopub.execute_input":"2024-08-11T17:15:38.696296Z","iopub.status.idle":"2024-08-11T17:15:38.706089Z","shell.execute_reply.started":"2024-08-11T17:15:38.696246Z","shell.execute_reply":"2024-08-11T17:15:38.705026Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Transforming the data using boxcox transformation to check if the transformed data follows normal distribution.","metadata":{}},{"cell_type":"code","source":"transformed_osrm_time = spy.boxcox(df2['osrm_time'])[0]\ntest_stat, p_value = spy.shapiro(transformed_osrm_time)\nprint('p-value', p_value)\nif p_value < 0.05:\n    print('The sample does not follow normal distribution')\nelse:\n    print('The sample follows normal distribution') ","metadata":{"execution":{"iopub.status.busy":"2024-08-11T17:16:11.645349Z","iopub.execute_input":"2024-08-11T17:16:11.645751Z","iopub.status.idle":"2024-08-11T17:16:11.666885Z","shell.execute_reply.started":"2024-08-11T17:16:11.645719Z","shell.execute_reply":"2024-08-11T17:16:11.665742Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"transformed_segment_osrm_time = spy.boxcox(df2['segment_osrm_time'])[0]\ntest_stat, p_value = spy.shapiro(transformed_segment_osrm_time)\nprint('p-value', p_value)\nif p_value < 0.05:\n    print('The sample does not follow normal distribution')\nelse:\n    print('The sample follows normal distribution')","metadata":{"execution":{"iopub.status.busy":"2024-08-11T17:16:30.889727Z","iopub.execute_input":"2024-08-11T17:16:30.890191Z","iopub.status.idle":"2024-08-11T17:16:30.914476Z","shell.execute_reply.started":"2024-08-11T17:16:30.890157Z","shell.execute_reply":"2024-08-11T17:16:30.913456Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Even after applying the boxcox transformation on each of the \"osrm_time\" and \"segment_osrm_time\" columns, the distributions do not follow normal distribution.\n\n**Homogeneity of Variances using Lavene's test**","metadata":{}},{"cell_type":"code","source":"# Null Hypothesis(H0) - Homogenous Variance \n\n# Alternate Hypothesis(HA) - Non Homogenous Variance \n\ntest_stat, p_value = spy.levene(df2['osrm_time'], df2['segment_osrm_time'])\nprint('p-value', p_value)\n\nif p_value < 0.05:\n    print('The samples do not have Homogenous Variance')\nelse:\n    print('The samples have Homogenous Variance ') ","metadata":{"execution":{"iopub.status.busy":"2024-08-11T17:17:13.963472Z","iopub.execute_input":"2024-08-11T17:17:13.963899Z","iopub.status.idle":"2024-08-11T17:17:13.972342Z","shell.execute_reply.started":"2024-08-11T17:17:13.963864Z","shell.execute_reply":"2024-08-11T17:17:13.971238Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Since the samples do not follow any of the assumptions, T-Test cannot be applied here. We can perform its non parametric equivalent test i.e., Mann-Whitney U rank test for two independent samples.","metadata":{}},{"cell_type":"code","source":"test_stat, p_value = spy.mannwhitneyu(df2['osrm_time'], df2['segment_osrm_time'])\nprint('p-value', p_value)\nif p_value < 0.05:\n    print('The samples are not similar')\nelse:\n    print('The samples are similar ') ","metadata":{"execution":{"iopub.status.busy":"2024-08-11T17:17:43.724777Z","iopub.execute_input":"2024-08-11T17:17:43.725198Z","iopub.status.idle":"2024-08-11T17:17:43.762640Z","shell.execute_reply.started":"2024-08-11T17:17:43.725156Z","shell.execute_reply":"2024-08-11T17:17:43.761323Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Since p-value < alpha therfore it can be concluded that osrm_time and segment_osrm_time are not similar.","metadata":{}},{"cell_type":"markdown","source":"# **Find outliers in the numerical variables (you might find outliers in almost all the variables), and check it using visual analysis**","metadata":{}},{"cell_type":"code","source":"numerical_columns = ['od_total_time', 'start_scan_to_end_scan', 'actual_distance_to_destination',\n                    'actual_time', 'osrm_time', 'osrm_distance', 'segment_actual_time',\n                    'segment_osrm_time', 'segment_osrm_distance']\ndf2[numerical_columns].describe().T","metadata":{"execution":{"iopub.status.busy":"2024-08-11T17:18:45.735260Z","iopub.execute_input":"2024-08-11T17:18:45.735915Z","iopub.status.idle":"2024-08-11T17:18:45.781431Z","shell.execute_reply.started":"2024-08-11T17:18:45.735876Z","shell.execute_reply":"2024-08-11T17:18:45.780112Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import matplotlib as mpl\nplt.figure(figsize = (18, 15))\nfor i in range(len(numerical_columns)):\n    plt.subplot(3, 3, i + 1)\n    clr = np.random.choice(list(mpl.colors.cnames))\n    sns.histplot(df2[numerical_columns[i]], bins = 1000, kde = True, color = clr)\n    plt.title(f\"Distribution of {numerical_columns[i]} column\")\n    plt.plot()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T17:20:18.734715Z","iopub.execute_input":"2024-08-11T17:20:18.735748Z","iopub.status.idle":"2024-08-11T17:20:37.320085Z","shell.execute_reply.started":"2024-08-11T17:20:18.735709Z","shell.execute_reply":"2024-08-11T17:20:37.318861Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"It can be inferred from the above plots that data in all the numerical columns are right skewed.","metadata":{}},{"cell_type":"code","source":"plt.figure(figsize = (18, 15))\nfor i in range(len(numerical_columns)):\n    plt.subplot(3, 3, i + 1)\n    clr = np.random.choice(list(mpl.colors.cnames))\n    sns.boxplot(df2[numerical_columns[i]], color = clr)\n    plt.title(f\"Distribution of {numerical_columns[i]} column\")\n    plt.plot()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T17:21:27.454176Z","iopub.execute_input":"2024-08-11T17:21:27.454571Z","iopub.status.idle":"2024-08-11T17:21:29.163013Z","shell.execute_reply.started":"2024-08-11T17:21:27.454542Z","shell.execute_reply":"2024-08-11T17:21:29.161869Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"It can be clearly seen in the above plots that there are outliers in all the numerical columns that need to be treated.","metadata":{}},{"cell_type":"code","source":"# Detecting Outliers\n\nfor i in numerical_columns:\n    Q1 = np.quantile(df2[i], 0.25)\n    Q3 = np.quantile(df2[i], 0.75)\n    IQR = Q3 - Q1\n    LB = Q1 - 1.5 * IQR\n    UB = Q3 + 1.5 * IQR\n    outliers = df2.loc[(df2[i] < LB) | (df2[i] > UB)]\n    print('Column :', i)\n    print(f'Q1 : {Q1}')\n    print(f'Q3 : {Q3}')\n    print(f'IQR : {IQR}')\n    print(f'LB : {LB}')\n    print(f'UB : {UB}')\n    print(f'Number of outliers : {outliers.shape[0]}')\n    print('----------------------------------')","metadata":{"execution":{"iopub.status.busy":"2024-08-11T17:22:20.970130Z","iopub.execute_input":"2024-08-11T17:22:20.970566Z","iopub.status.idle":"2024-08-11T17:22:21.018178Z","shell.execute_reply.started":"2024-08-11T17:22:20.970533Z","shell.execute_reply":"2024-08-11T17:22:21.016801Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"The outliers present in our sample data can be the true outliers. It's best to remove outliers only when there is a sound reason for doing so. Some outliers represent natural variations in the population, and they should be left as is in the dataset.","metadata":{}},{"cell_type":"markdown","source":"# **Do one-hot encoding of categorical variables (like route_type)******","metadata":{}},{"cell_type":"code","source":"# Get value counts before one-hot encoding\n\ndf2['route_type'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T17:23:58.559711Z","iopub.execute_input":"2024-08-11T17:23:58.560188Z","iopub.status.idle":"2024-08-11T17:23:58.570663Z","shell.execute_reply.started":"2024-08-11T17:23:58.560155Z","shell.execute_reply":"2024-08-11T17:23:58.569477Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.preprocessing import LabelEncoder \nlabel_encoder = LabelEncoder()\ndf2['route_type'] = label_encoder.fit_transform(df2['route_type'])","metadata":{"execution":{"iopub.status.busy":"2024-08-11T17:24:24.083135Z","iopub.execute_input":"2024-08-11T17:24:24.083570Z","iopub.status.idle":"2024-08-11T17:24:24.090819Z","shell.execute_reply.started":"2024-08-11T17:24:24.083537Z","shell.execute_reply":"2024-08-11T17:24:24.089484Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Get value counts after one-hot encoding\n\ndf2['route_type'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T17:24:38.327469Z","iopub.execute_input":"2024-08-11T17:24:38.327865Z","iopub.status.idle":"2024-08-11T17:24:38.336850Z","shell.execute_reply.started":"2024-08-11T17:24:38.327835Z","shell.execute_reply":"2024-08-11T17:24:38.335552Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Get value counts of categorical variable 'data' before one-hot encoding\n\ndf2['data'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T17:24:57.359300Z","iopub.execute_input":"2024-08-11T17:24:57.361521Z","iopub.status.idle":"2024-08-11T17:24:57.382451Z","shell.execute_reply.started":"2024-08-11T17:24:57.361364Z","shell.execute_reply":"2024-08-11T17:24:57.381250Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"label_encoder = LabelEncoder()\ndf2['data'] = label_encoder.fit_transform(df2['data'])","metadata":{"execution":{"iopub.status.busy":"2024-08-11T17:25:17.791474Z","iopub.execute_input":"2024-08-11T17:25:17.791918Z","iopub.status.idle":"2024-08-11T17:25:17.801811Z","shell.execute_reply.started":"2024-08-11T17:25:17.791878Z","shell.execute_reply":"2024-08-11T17:25:17.800386Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Get value counts after one-hot encoding\n\ndf2['data'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T17:25:29.622441Z","iopub.execute_input":"2024-08-11T17:25:29.622828Z","iopub.status.idle":"2024-08-11T17:25:29.631565Z","shell.execute_reply.started":"2024-08-11T17:25:29.622798Z","shell.execute_reply":"2024-08-11T17:25:29.630355Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# **Normalize/ Standardize the numerical features using MinMaxScaler or StandardScaler.**","metadata":{}},{"cell_type":"code","source":"from sklearn.preprocessing import MinMaxScaler","metadata":{"execution":{"iopub.status.busy":"2024-08-11T17:26:15.381970Z","iopub.execute_input":"2024-08-11T17:26:15.382383Z","iopub.status.idle":"2024-08-11T17:26:15.388379Z","shell.execute_reply.started":"2024-08-11T17:26:15.382350Z","shell.execute_reply":"2024-08-11T17:26:15.387265Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize = (10, 6))\nscaler = MinMaxScaler()\nscaled = scaler.fit_transform(df2['od_total_time'].to_numpy().reshape(-1, 1))\nsns.histplot(scaled)\nplt.title(f\"Normalized {df2['od_total_time']} column\")\nplt.legend('od_total_time')\nplt.plot()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T17:26:58.213298Z","iopub.execute_input":"2024-08-11T17:26:58.213716Z","iopub.status.idle":"2024-08-11T17:26:59.055286Z","shell.execute_reply.started":"2024-08-11T17:26:58.213682Z","shell.execute_reply":"2024-08-11T17:26:59.053724Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize = (10, 6))\nscaler = MinMaxScaler()\nscaled = scaler.fit_transform(df2['start_scan_to_end_scan'].to_numpy().reshape(-1, 1))\nsns.histplot(scaled)\nplt.title(f\"Normalized {df2['start_scan_to_end_scan']} column\")\nplt.plot()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T17:27:22.631244Z","iopub.execute_input":"2024-08-11T17:27:22.631646Z","iopub.status.idle":"2024-08-11T17:27:23.437047Z","shell.execute_reply.started":"2024-08-11T17:27:22.631616Z","shell.execute_reply":"2024-08-11T17:27:23.435876Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize = (10, 6))\nscaler = MinMaxScaler()\nscaled = scaler.fit_transform(df2['actual_distance_to_destination'].to_numpy().reshape(-1, 1))\nsns.histplot(scaled)\nplt.title(f\"Normalized {df2['actual_distance_to_destination']} column\")\nplt.plot()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T17:27:40.647054Z","iopub.execute_input":"2024-08-11T17:27:40.647460Z","iopub.status.idle":"2024-08-11T17:27:41.432655Z","shell.execute_reply.started":"2024-08-11T17:27:40.647428Z","shell.execute_reply":"2024-08-11T17:27:41.431487Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize = (10, 6))\nscaler = MinMaxScaler()\nscaled = scaler.fit_transform(df2['actual_time'].to_numpy().reshape(-1, 1))\nsns.histplot(scaled)\nplt.title(f\"Normalized {df2['actual_time']} column\")\nplt.plot()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T17:28:02.892149Z","iopub.execute_input":"2024-08-11T17:28:02.892595Z","iopub.status.idle":"2024-08-11T17:28:03.771211Z","shell.execute_reply.started":"2024-08-11T17:28:02.892557Z","shell.execute_reply":"2024-08-11T17:28:03.770056Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize = (10, 6))\nscaler = MinMaxScaler()\nscaled = scaler.fit_transform(df2['osrm_time'].to_numpy().reshape(-1, 1))\nsns.histplot(scaled)\nplt.title(f\"Normalized {df2['osrm_time']} column\")\nplt.plot()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T17:28:19.968937Z","iopub.execute_input":"2024-08-11T17:28:19.969944Z","iopub.status.idle":"2024-08-11T17:28:20.736164Z","shell.execute_reply.started":"2024-08-11T17:28:19.969905Z","shell.execute_reply":"2024-08-11T17:28:20.734877Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize = (10, 6))\nscaler = MinMaxScaler()\nscaled = scaler.fit_transform(df2['osrm_distance'].to_numpy().reshape(-1, 1))\nsns.histplot(scaled)\nplt.title(f\"Normalized {df2['osrm_distance']} column\")\nplt.plot()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T17:28:38.650302Z","iopub.execute_input":"2024-08-11T17:28:38.651269Z","iopub.status.idle":"2024-08-11T17:28:39.452549Z","shell.execute_reply.started":"2024-08-11T17:28:38.651229Z","shell.execute_reply":"2024-08-11T17:28:39.451202Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize = (10, 6))\nscaler = MinMaxScaler()\nscaled = scaler.fit_transform(df2['segment_actual_time'].to_numpy().reshape(-1, 1))\nsns.histplot(scaled)\nplt.title(f\"Normalized {df2['segment_actual_time']} column\")\nplt.plot()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T17:28:56.715268Z","iopub.execute_input":"2024-08-11T17:28:56.715685Z","iopub.status.idle":"2024-08-11T17:28:57.646637Z","shell.execute_reply.started":"2024-08-11T17:28:56.715652Z","shell.execute_reply":"2024-08-11T17:28:57.645387Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize = (10, 6))\nscaler = MinMaxScaler()\nscaled = scaler.fit_transform(df2['segment_osrm_time'].to_numpy().reshape(-1, 1))\nsns.histplot(scaled)\nplt.title(f\"Normalized {df2['segment_osrm_time']} column\")\nplt.plot()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T17:29:23.038966Z","iopub.execute_input":"2024-08-11T17:29:23.040306Z","iopub.status.idle":"2024-08-11T17:29:23.795283Z","shell.execute_reply.started":"2024-08-11T17:29:23.040264Z","shell.execute_reply":"2024-08-11T17:29:23.794090Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize = (10, 6))\nscaler = MinMaxScaler()\nscaled = scaler.fit_transform(df2['segment_osrm_distance'].to_numpy().reshape(-1, 1))\nsns.histplot(scaled)\nplt.title(f\"Normalized {df2['segment_osrm_distance']} column\")\nplt.plot()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T17:29:41.233928Z","iopub.execute_input":"2024-08-11T17:29:41.234308Z","iopub.status.idle":"2024-08-11T17:29:42.087366Z","shell.execute_reply.started":"2024-08-11T17:29:41.234281Z","shell.execute_reply":"2024-08-11T17:29:42.086273Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Column Standardization","metadata":{}},{"cell_type":"code","source":"from sklearn.preprocessing import StandardScaler","metadata":{"execution":{"iopub.status.busy":"2024-08-11T17:30:25.593128Z","iopub.execute_input":"2024-08-11T17:30:25.593544Z","iopub.status.idle":"2024-08-11T17:30:25.599129Z","shell.execute_reply.started":"2024-08-11T17:30:25.593514Z","shell.execute_reply":"2024-08-11T17:30:25.597773Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize = (10, 6))\n# define standard scaler\nscaler = StandardScaler()\n# transform data\nscaled = scaler.fit_transform(df2['od_total_time'].to_numpy().reshape(-1, 1))\nsns.histplot(scaled)\nplt.title(f\"Standardized {df2['od_total_time']} column\")\nplt.legend('od_total_time')\nplt.plot()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T17:30:48.454601Z","iopub.execute_input":"2024-08-11T17:30:48.455607Z","iopub.status.idle":"2024-08-11T17:30:49.264134Z","shell.execute_reply.started":"2024-08-11T17:30:48.455561Z","shell.execute_reply":"2024-08-11T17:30:49.262987Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize = (10, 6))\nscaler = StandardScaler()\nscaled = scaler.fit_transform(df2['start_scan_to_end_scan'].to_numpy().reshape(-1, 1))\nsns.histplot(scaled)\nplt.title(f\"Standardized {df2['start_scan_to_end_scan']} column\")\nplt.plot()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T17:31:06.712937Z","iopub.execute_input":"2024-08-11T17:31:06.713413Z","iopub.status.idle":"2024-08-11T17:31:07.495300Z","shell.execute_reply.started":"2024-08-11T17:31:06.713372Z","shell.execute_reply":"2024-08-11T17:31:07.494044Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize = (10, 6))\nscaler = StandardScaler()\nscaled = scaler.fit_transform(df2['actual_distance_to_destination'].to_numpy().reshape(-1, 1))\nsns.histplot(scaled)\nplt.title(f\"Standardized {df2['actual_distance_to_destination']} column\")\nplt.plot()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T17:31:24.907957Z","iopub.execute_input":"2024-08-11T17:31:24.908361Z","iopub.status.idle":"2024-08-11T17:31:25.664465Z","shell.execute_reply.started":"2024-08-11T17:31:24.908329Z","shell.execute_reply":"2024-08-11T17:31:25.663291Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize = (10, 6))\nscaler = StandardScaler()\nscaled = scaler.fit_transform(df2['actual_time'].to_numpy().reshape(-1, 1))\nsns.histplot(scaled)\nplt.title(f\"Standardized {df2['actual_time']} column\")\nplt.plot()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T17:31:47.470435Z","iopub.execute_input":"2024-08-11T17:31:47.470856Z","iopub.status.idle":"2024-08-11T17:31:48.403429Z","shell.execute_reply.started":"2024-08-11T17:31:47.470822Z","shell.execute_reply":"2024-08-11T17:31:48.402129Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize = (10, 6))\nscaler = StandardScaler()\nscaled = scaler.fit_transform(df2['osrm_time'].to_numpy().reshape(-1, 1))\nsns.histplot(scaled)\nplt.title(f\"Standardized {df2['osrm_time']} column\")\nplt.plot()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T17:32:04.921105Z","iopub.execute_input":"2024-08-11T17:32:04.921524Z","iopub.status.idle":"2024-08-11T17:32:06.610973Z","shell.execute_reply.started":"2024-08-11T17:32:04.921491Z","shell.execute_reply":"2024-08-11T17:32:06.609675Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize = (10, 6))\nscaler = StandardScaler()\nscaled = scaler.fit_transform(df2['osrm_distance'].to_numpy().reshape(-1, 1))\nsns.histplot(scaled)\nplt.title(f\"Standardized {df2['osrm_distance']} column\")\nplt.plot()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T17:32:27.469305Z","iopub.execute_input":"2024-08-11T17:32:27.469710Z","iopub.status.idle":"2024-08-11T17:32:28.233152Z","shell.execute_reply.started":"2024-08-11T17:32:27.469678Z","shell.execute_reply":"2024-08-11T17:32:28.231751Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize = (10, 6))\nscaler = StandardScaler()\nscaled = scaler.fit_transform(df2['segment_actual_time'].to_numpy().reshape(-1, 1))\nsns.histplot(scaled)\nplt.title(f\"Standardized {df2['segment_actual_time']} column\")\nplt.plot()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T17:32:44.355349Z","iopub.execute_input":"2024-08-11T17:32:44.355743Z","iopub.status.idle":"2024-08-11T17:32:45.253142Z","shell.execute_reply.started":"2024-08-11T17:32:44.355715Z","shell.execute_reply":"2024-08-11T17:32:45.251725Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize = (10, 6))\nscaler = StandardScaler()\nscaled = scaler.fit_transform(df2['segment_osrm_time'].to_numpy().reshape(-1, 1))\nsns.histplot(scaled)\nplt.title(f\"Standardized {df2['segment_osrm_time']} column\")\nplt.plot()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T17:33:06.447837Z","iopub.execute_input":"2024-08-11T17:33:06.448256Z","iopub.status.idle":"2024-08-11T17:33:07.264848Z","shell.execute_reply.started":"2024-08-11T17:33:06.448221Z","shell.execute_reply":"2024-08-11T17:33:07.263811Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize = (10, 6))\nscaler = StandardScaler()\nscaled = scaler.fit_transform(df2['segment_osrm_distance'].to_numpy().reshape(-1, 1))\nsns.histplot(scaled)\nplt.title(f\"Standardized {df2['segment_osrm_distance']} column\")\nplt.plot()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T17:33:26.708208Z","iopub.execute_input":"2024-08-11T17:33:26.708611Z","iopub.status.idle":"2024-08-11T17:33:27.562775Z","shell.execute_reply.started":"2024-08-11T17:33:26.708580Z","shell.execute_reply":"2024-08-11T17:33:27.561486Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Business Insights**\nThe data is given from the period '2018-09-12 00:00:16' to '2018-10-08 03:00:24'.\n\nThere are about 14817 unique trip IDs, 1508 unique source centers, 1481 unique destination_centers, 690 unique source cities, 806 unique destination cities.\n\nMost of the data is for testing than for training.\n\nMost common route type is Carting.\n\nThe names of 14 unique location ids are missing in the data.\n\nThe number of trips start increasing after the noon, becomes maximum at 10 P.M and then start decreasing.\n\nMaximum trips are created in the 38th week.\n\nMost orders come mid-month. That means customers usually make more orders in the mid of the month.\n\nMost orders are sourced from the states like Maharashtra, Karnataka, Haryana, Tamil Nadu, Telangana\n\nMaximum number of trips originated from Mumbai city followed by Gurgaon Delhi, Bengaluru and Bhiwandi. That means that the seller base is strong in these cities.\n\nMaximum number of trips ended in Maharashtra state followed by Karnataka, Haryana, Tamil Nadu and Uttar Pradesh. That means that the number of orders placed in these states is significantly high.\n\nMaximum number of trips ended in Mumbai city followed by Bengaluru, Gurgaon, Delhi and Chennai. That means that the number of orders placed in these cities is significantly high.\n\nMost orders in terms of destination are coming from cities like bengaluru, mumbai, gurgaon, bangalore, Delhi.\n\nFeatures start_scan_to_end_scan and od_total_time(created feature) are statistically similar.\n\nFeatures actual_time & osrm_time are statitically different.\n\nFeatures start_scan_to_end_scan and segment_actual_time are statistically similar.\n\nFeatures osrm_distance and segment_osrm_distance are statistically different from each other.\n\nBoth the osrm_time & segment_osrm_time are not statistically same.\n\n# **Recommendations**\nThe OSRM trip planning system needs to be improved. Discrepancies need to be catered to for transporters, if the routing engine is configured for optimum results.\n\nosrm_time and actual_time are different. Team needs to make sure this difference is reduced, so that better delivery time prediction can be made and it becomes convenient for the customer to expect an accurate delivery time.","metadata":{}}]}